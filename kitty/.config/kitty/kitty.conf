+ACM vim:fileencoding+AD0-utf-7:foldmethod+AD0-marker

+ACM: Fonts +AHsAewB7

+ACM: kitty has very powerful font management. You can configure
+ACM: individual font faces and even specify special fonts for particular
+ACM: characters.

font+AF8-family      Iosevka Term
+ACM bold+AF8-font        auto
+ACM italic+AF8-font      auto
+ACM bold+AF8-italic+AF8-font auto

+ACM: You can specify different fonts for the bold/italic/bold-italic
+ACM: variants. To get a full list of supported fonts use the +AGA-kitty
+ACM: +-list-fonts+AGA command. By default they are derived automatically, by
+ACM: the OSes font system. When bold+AF8-font or bold+AF8-italic+AF8-font is set to
+ACM: auto on macOS, the priority of bold fonts is semi-bold, bold,
+ACM: heavy. Setting them manually is useful for font families that have
+ACM: many weight variants like Book, Medium, Thick, etc. For example::

+ACM:     font+AF8-family      Operator Mono Book
+ACM:     bold+AF8-font        Operator Mono Medium
+ACM:     italic+AF8-font      Operator Mono Book Italic
+ACM:     bold+AF8-italic+AF8-font Operator Mono Medium Italic

font+AF8-size 16.0

+ACM: Font size (in pts)

+ACM force+AF8-ltr no

+ACM: kitty does not support BIDI (bidirectional text), however, for RTL
+ACM: scripts, words are automatically displayed in RTL. That is to say,
+ACM: in an RTL script, the words +ACI-HELLO WORLD+ACI display in kitty as
+ACM: +ACI-WORLD HELLO+ACI, and if you try to select a substring of an RTL-
+ACM: shaped string, you will get the character that would be there had
+ACM: the string been LTR. For example, assuming the Hebrew word +BdkF6AXVBekF3AXZBd0,
+ACM: selecting the character that on the screen appears to be +Bd0 actually
+ACM: writes into the selection buffer the character +Bdk. kitty's default
+ACM: behavior is useful in conjunction with a filter to reverse the word
+ACM: order, however, if you wish to manipulate RTL glyphs, it can be
+ACM: very challenging to work with, so this option is provided to turn
+ACM: it off. Furthermore, this option can be used with the command line
+ACM: program GNU FriBidi +ADw-https://github.com/fribidi/fribidi+ACM-executable+AD4
+ACM: to get BIDI support, because it will force kitty to always treat
+ACM: the text as LTR, which FriBidi expects for terminals.

+ACM symbol+AF8-map

+ACM: E.g. symbol+AF8-map U+-E0A0-U+-E0A3,U+-E0C0-U+-E0C7 PowerlineSymbols

+ACM: Map the specified Unicode codepoints to a particular font. Useful
+ACM: if you need special rendering for some symbols, such as for
+ACM: Powerline. Avoids the need for patched fonts. Each Unicode code
+ACM: point is specified in the form +AGA-U+-+ADw-code point in hexadecimal+AD4AYA. You
+ACM: can specify multiple code points, separated by commas and ranges
+ACM: separated by hyphens. This option can be specified multiple times.
+ACM: The syntax is::

+ACM:     symbol+AF8-map codepoints Font Family Name

+ACM narrow+AF8-symbols

+ACM: E.g. narrow+AF8-symbols U+-E0A0-U+-E0A3,U+-E0C0-U+-E0C7 1

+ACM: Usually, for Private Use Unicode characters and some symbol/dingbat
+ACM: characters, if the character is followed by one or more spaces,
+ACM: kitty will use those extra cells to render the character larger, if
+ACM: the character in the font has a wide aspect ratio. Using this
+ACM: option you can force kitty to restrict the specified code points to
+ACM: render in the specified number of cells (defaulting to one cell).
+ACM: This option can be specified multiple times. The syntax is::

+ACM:     narrow+AF8-symbols codepoints +AFs-optionally the number of cells+AF0

+ACM disable+AF8-ligatures never

+ACM: Choose how you want to handle multi-character ligatures. The
+ACM: default is to always render them. You can tell kitty to not render
+ACM: them when the cursor is over them by using cursor to make editing
+ACM: easier, or have kitty never render them at all by using always, if
+ACM: you don't like them. The ligature strategy can be set per-window
+ACM: either using the kitty remote control facility or by defining
+ACM: shortcuts for it in kitty.conf, for example::

+ACM:     map alt+-1 disable+AF8-ligatures+AF8-in active always
+ACM:     map alt+-2 disable+AF8-ligatures+AF8-in all never
+ACM:     map alt+-3 disable+AF8-ligatures+AF8-in tab cursor

+ACM: Note that this refers to programming ligatures, typically
+ACM: implemented using the calt OpenType feature. For disabling general
+ACM: ligatures, use the font+AF8-features option.

+ACM font+AF8-features

+ACM: E.g. font+AF8-features none

+ACM: Choose exactly which OpenType features to enable or disable. This
+ACM: is useful as some fonts might have features worthwhile in a
+ACM: terminal. For example, Fira Code includes a discretionary feature,
+ACM: zero, which in that font changes the appearance of the zero (0), to
+ACM: make it more easily distinguishable from +ANg. Fira Code also includes
+ACM: other discretionary features known as Stylistic Sets which have the
+ACM: tags ss01 through ss20.

+ACM: For the exact syntax to use for individual features, see the
+ACM: HarfBuzz documentation +ADw-https://harfbuzz.github.io/harfbuzz-hb-
+ACM: common.html+ACM-hb-feature-from-string+AD4.

+ACM: Note that this code is indexed by PostScript name, and not the font
+ACM: family. This allows you to define very precise feature settings+ADs
+ACM: e.g. you can disable a feature in the italic font but not in the
+ACM: regular font.

+ACM: On Linux, font features are first read from the FontConfig database
+ACM: and then this option is applied, so they can be configured in a
+ACM: single, central place.

+ACM: To get the PostScript name for a font, use +AGA-kitty +-list-fonts
+ACM: --psnames+AGA:

+ACM: .. code-block:: sh

+ACM:     +ACQ kitty +-list-fonts --psnames +AHw grep Fira
+ACM:     Fira Code
+ACM:     Fira Code Bold (FiraCode-Bold)
+ACM:     Fira Code Light (FiraCode-Light)
+ACM:     Fira Code Medium (FiraCode-Medium)
+ACM:     Fira Code Regular (FiraCode-Regular)
+ACM:     Fira Code Retina (FiraCode-Retina)

+ACM: The part in brackets is the PostScript name.

+ACM: Enable alternate zero and oldstyle numerals::

+ACM:     font+AF8-features FiraCode-Retina +-zero +-onum

+ACM: Enable only alternate zero in the bold font::

+ACM:     font+AF8-features FiraCode-Bold +-zero

+ACM: Disable the normal ligatures, but keep the calt feature which (in
+ACM: this font) breaks up monotony::

+ACM:     font+AF8-features TT2020StyleB-Regular -liga +-calt

+ACM: In conjunction with force+AF8-ltr, you may want to disable Arabic
+ACM: shaping entirely, and only look at their isolated forms if they
+ACM: show up in a document. You can do this with e.g.::

+ACM:     font+AF8-features UnifontMedium +-isol -medi -fina -init

+ACM modify+AF8-font

+ACM: Modify font characteristics such as the position or thickness of
+ACM: the underline and strikethrough. The modifications can have the
+ACM: suffix px for pixels or +ACU for percentage of original value. No
+ACM: suffix means use pts. For example::

+ACM:     modify+AF8-font underline+AF8-position -2
+ACM:     modify+AF8-font underline+AF8-thickness 150+ACU
+ACM:     modify+AF8-font strikethrough+AF8-position 2px

+ACM: Additionally, you can modify the size of the cell in which each
+ACM: font glyph is rendered and the baseline at which the glyph is
+ACM: placed in the cell. For example::

+ACM:     modify+AF8-font cell+AF8-width 80+ACU
+ACM:     modify+AF8-font cell+AF8-height -2px
+ACM:     modify+AF8-font baseline 3

+ACM: Note that modifying the baseline will automatically adjust the
+ACM: underline and strikethrough positions by the same amount.
+ACM: Increasing the baseline raises glyphs inside the cell and
+ACM: decreasing it lowers them. Decreasing the cell size might cause
+ACM: rendering artifacts, so use with care.

+ACM box+AF8-drawing+AF8-scale 0.001, 1, 1.5, 2

+ACM: The sizes of the lines used for the box drawing Unicode characters.
+ACM: These values are in pts. They will be scaled by the monitor DPI to
+ACM: arrive at a pixel value. There must be four values corresponding to
+ACM: thin, normal, thick, and very thick lines.

+ACM undercurl+AF8-style thin-sparse

+ACM: The style with which undercurls are rendered. This option takes the
+ACM: form (thin+AHw-thick)-(sparse+AHw-dense). Thin and thick control the
+ACM: thickness of the undercurl. Sparse and dense control how often the
+ACM: curl oscillates. With sparse the curl will peak once per character,
+ACM: with dense twice.

+ACM text+AF8-composition+AF8-strategy platform

+ACM: Control how kitty composites text glyphs onto the background color.
+ACM: The default value of platform tries for text rendering as close to
+ACM: +ACI-native+ACI for the platform kitty is running on as possible.

+ACM: A value of legacy uses the old (pre kitty 0.28) strategy for how
+ACM: glyphs are composited. This will make dark text on light
+ACM: backgrounds look thicker and light text on dark backgrounds
+ACM: thinner. It might also make some text appear like the strokes are
+ACM: uneven.

+ACM: You can fine tune the actual contrast curve used for glyph
+ACM: composition by specifying up to two space-separated numbers for
+ACM: this setting.

+ACM: The first number is the gamma adjustment, which controls the
+ACM: thickness of dark text on light backgrounds. Increasing the value
+ACM: will make text appear thicker. The default value for this is 1.0 on
+ACM: Linux and 1.7 on macOS. Valid values are 0.01 and above. The result
+ACM: is scaled based on the luminance difference between the background
+ACM: and the foreground. Dark text on light backgrounds receives the
+ACM: full impact of the curve while light text on dark backgrounds is
+ACM: affected very little.

+ACM: The second number is an additional multiplicative contrast. It is
+ACM: percentage ranging from 0 to 100. The default value is 0 on Linux
+ACM: and 30 on macOS.

+ACM: If you wish to achieve similar looking thickness in light and dark
+ACM: themes, a good way to experiment is start by setting the value to
+ACM: 1.0 0 and use a dark theme. Then adjust the second parameter until
+ACM: it looks good. Then switch to a light theme and adjust the first
+ACM: parameter until the perceived thickness matches the dark theme.

+ACM text+AF8-fg+AF8-override+AF8-threshold 0

+ACM: The minimum accepted difference in luminance between the foreground
+ACM: and background color, below which kitty will override the
+ACM: foreground color. It is percentage ranging from 0 to 100. If the
+ACM: difference in luminance of the foreground and background is below
+ACM: this threshold, the foreground color will be set to white if the
+ACM: background is dark or black if the background is light. The default
+ACM: value is 0, which means no overriding is performed. Useful when
+ACM: working with applications that use colors that do not contrast well
+ACM: with your preferred color scheme.

+ACM: WARNING: Some programs use characters (such as block characters)
+ACM: for graphics display and may expect to be able to set the
+ACM: foreground and background to the same color (or similar colors).
+ACM: If you see unexpected stripes, dots, lines, incorrect color, no
+ACM: color where you expect color, or any kind of graphic display
+ACM: problem try setting text+AF8-fg+AF8-override+AF8-threshold to 0 to see if this
+ACM: is the cause of the problem.

+ACM: +AH0AfQB9

+ACM: Cursor customization +AHsAewB7

+ACM cursor +ACM-cccccc

+ACM: Default cursor color. If set to the special value none the cursor
+ACM: will be rendered with a +ACI-reverse video+ACI effect. It's color will be
+ACM: the color of the text in the cell it is over and the text will be
+ACM: rendered with the background color of the cell. Note that if the
+ACM: program running in the terminal sets a cursor color, this takes
+ACM: precedence. Also, the cursor colors are modified if the cell
+ACM: background and foreground colors have very low contrast.

+ACM cursor+AF8-text+AF8-color +ACM-111111

+ACM: The color of text under the cursor. If you want it rendered with
+ACM: the background color of the cell underneath instead, use the
+ACM: special keyword: background. Note that if cursor is set to none
+ACM: then this option is ignored.

+ACM cursor+AF8-shape block

+ACM: The cursor shape can be one of block, beam, underline. Note that
+ACM: when reloading the config this will be changed only if the cursor
+ACM: shape has not been set by the program running in the terminal. This
+ACM: sets the default cursor shape, applications running in the terminal
+ACM: can override it. In particular, shell integration
+ACM: +ADw-https://sw.kovidgoyal.net/kitty/shell-integration/+AD4 in kitty sets
+ACM: the cursor shape to beam at shell prompts. You can avoid this by
+ACM: setting shell+AF8-integration to no-cursor.

+ACM cursor+AF8-beam+AF8-thickness 1.5

+ACM: The thickness of the beam cursor (in pts).

+ACM cursor+AF8-underline+AF8-thickness 2.0

+ACM: The thickness of the underline cursor (in pts).

+ACM cursor+AF8-blink+AF8-interval -1

+ACM: The interval to blink the cursor (in seconds). Set to zero to
+ACM: disable blinking. Negative values mean use system default. Note
+ACM: that the minimum interval will be limited to repaint+AF8-delay.

+ACM cursor+AF8-stop+AF8-blinking+AF8-after 15.0

+ACM: Stop blinking cursor after the specified number of seconds of
+ACM: keyboard inactivity. Set to zero to never stop blinking.

+ACM: +AH0AfQB9

+ACM: Scrollback +AHsAewB7

+ACM scrollback+AF8-lines 2000

+ACM: Number of lines of history to keep in memory for scrolling back.
+ACM: Memory is allocated on demand. Negative numbers are (effectively)
+ACM: infinite scrollback. Note that using very large scrollback is not
+ACM: recommended as it can slow down performance of the terminal and
+ACM: also use large amounts of RAM. Instead, consider using
+ACM: scrollback+AF8-pager+AF8-history+AF8-size. Note that on config reload if this
+ACM: is changed it will only affect newly created windows, not existing
+ACM: ones.

+ACM scrollback+AF8-pager less --chop-long-lines --RAW-CONTROL-CHARS +-INPUT+AF8-LINE+AF8-NUMBER

+ACM: Program with which to view scrollback in a new window. The
+ACM: scrollback buffer is passed as STDIN to this program. If you change
+ACM: it, make sure the program you use can handle ANSI escape sequences
+ACM: for colors and text formatting. INPUT+AF8-LINE+AF8-NUMBER in the command
+ACM: line above will be replaced by an integer representing which line
+ACM: should be at the top of the screen. Similarly CURSOR+AF8-LINE and
+ACM: CURSOR+AF8-COLUMN will be replaced by the current cursor position or
+ACM: set to 0 if there is no cursor, for example, when showing the last
+ACM: command output.

+ACM scrollback+AF8-pager+AF8-history+AF8-size 0

+ACM: Separate scrollback history size (in MB), used only for browsing
+ACM: the scrollback buffer with pager. This separate buffer is not
+ACM: available for interactive scrolling but will be piped to the pager
+ACM: program when viewing scrollback buffer in a separate window. The
+ACM: current implementation stores the data in UTF-8, so approximately
+ACM: 10000 lines per megabyte at 100 chars per line, for pure ASCII,
+ACM: unformatted text. A value of zero or less disables this feature.
+ACM: The maximum allowed size is 4GB. Note that on config reload if this
+ACM: is changed it will only affect newly created windows, not existing
+ACM: ones.

+ACM scrollback+AF8-fill+AF8-enlarged+AF8-window no

+ACM: Fill new space with lines from the scrollback buffer after
+ACM: enlarging a window.

+ACM wheel+AF8-scroll+AF8-multiplier 5.0

+ACM: Multiplier for the number of lines scrolled by the mouse wheel.
+ACM: Note that this is only used for low precision scrolling devices,
+ACM: not for high precision scrolling devices on platforms such as macOS
+ACM: and Wayland. Use negative numbers to change scroll direction. See
+ACM: also wheel+AF8-scroll+AF8-min+AF8-lines.

+ACM wheel+AF8-scroll+AF8-min+AF8-lines 1

+ACM: The minimum number of lines scrolled by the mouse wheel. The scroll
+ACM: multiplier wheel+AF8-scroll+AF8-multiplier only takes effect after it
+ACM: reaches this number. Note that this is only used for low precision
+ACM: scrolling devices like wheel mice that scroll by very small amounts
+ACM: when using the wheel. With a negative number, the minimum number of
+ACM: lines will always be added.

+ACM touch+AF8-scroll+AF8-multiplier 1.0

+ACM: Multiplier for the number of lines scrolled by a touchpad. Note
+ACM: that this is only used for high precision scrolling devices on
+ACM: platforms such as macOS and Wayland. Use negative numbers to change
+ACM: scroll direction.

+ACM: +AH0AfQB9

+ACM: Mouse +AHsAewB7

+ACM mouse+AF8-hide+AF8-wait 3.0

+ACM: Hide mouse cursor after the specified number of seconds of the
+ACM: mouse not being used. Set to zero to disable mouse cursor hiding.
+ACM: Set to a negative value to hide the mouse cursor immediately when
+ACM: typing text. Disabled by default on macOS as getting it to work
+ACM: robustly with the ever-changing sea of bugs that is Cocoa is too
+ACM: much effort.

+ACM url+AF8-color +ACM-0087bd
+ACM url+AF8-style curly

+ACM: The color and style for highlighting URLs on mouse-over. url+AF8-style
+ACM: can be one of: none, straight, double, curly, dotted, dashed.

+ACM open+AF8-url+AF8-with default

+ACM: The program to open clicked URLs. The special value default with
+ACM: first look for any URL handlers defined via the open+AF8-actions
+ACM: +ADw-https://sw.kovidgoyal.net/kitty/open+AF8-actions/+AD4 facility and if non
+ACM: are found, it will use the Operating System's default URL handler
+ACM: (open on macOS and xdg-open on Linux).

+ACM url+AF8-prefixes file ftp ftps gemini git gopher http https irc ircs kitty mailto news sftp ssh

+ACM: The set of URL prefixes to look for when detecting a URL under the
+ACM: mouse cursor.

+ACM detect+AF8-urls yes

+ACM: Detect URLs under the mouse. Detected URLs are highlighted with an
+ACM: underline and the mouse cursor becomes a hand over them. Even if
+ACM: this option is disabled, URLs are still clickable. See also the
+ACM: underline+AF8-hyperlinks option to control how hyperlinks (as opposed
+ACM: to plain text URLs) are displayed.

+ACM url+AF8-excluded+AF8-characters

+ACM: Additional characters to be disallowed from URLs, when detecting
+ACM: URLs under the mouse cursor. By default, all characters that are
+ACM: legal in URLs are allowed. Additionally, newlines are allowed (but
+ACM: stripped). This is to accommodate programs such as mutt that add
+ACM: hard line breaks even for continued lines. +AFw-n can be added to this
+ACM: option to disable this behavior. Special characters can be
+ACM: specified using backslash escapes, to specify a backslash use a
+ACM: double backslash.

+ACM show+AF8-hyperlink+AF8-targets no

+ACM: When the mouse hovers over a terminal hyperlink, show the actual
+ACM: URL that will be activated when the hyperlink is clicked.

+ACM underline+AF8-hyperlinks hover

+ACM: Control how hyperlinks are underlined. They can either be
+ACM: underlined on mouse hover, always (i.e. permanently underlined) or
+ACM: never which means that kitty will not apply any underline styling
+ACM: to hyperlinks. Uses the url+AF8-style and url+AF8-color settings for the
+ACM: underline style. Note that reloading the config and changing this
+ACM: value to/from always will only affect text subsequently received by
+ACM: kitty.

+ACM copy+AF8-on+AF8-select no

+ACM: Copy to clipboard or a private buffer on select. With this set to
+ACM: clipboard, selecting text with the mouse will cause the text to be
+ACM: copied to clipboard. Useful on platforms such as macOS that do not
+ACM: have the concept of primary selection. You can instead specify a
+ACM: name such as a1 to copy to a private kitty buffer. Map a shortcut
+ACM: with the paste+AF8-from+AF8-buffer action to paste from this private
+ACM: buffer. For example::

+ACM:     copy+AF8-on+AF8-select a1
+ACM:     map shift+-cmd+-v paste+AF8-from+AF8-buffer a1

+ACM: Note that copying to the clipboard is a security risk, as all
+ACM: programs, including websites open in your browser can read the
+ACM: contents of the system clipboard.

+ACM paste+AF8-actions quote-urls-at-prompt,confirm

+ACM: A comma separated list of actions to take when pasting text into
+ACM: the terminal. The supported paste actions are:

+ACM: quote-urls-at-prompt:
+ACM:     If the text being pasted is a URL and the cursor is at a shell prompt,
+ACM:     automatically quote the URL (needs shell+AF8-integration).
+ACM: replace-dangerous-control-codes
+ACM:     Replace dangerous control codes from pasted text, without confirmation.
+ACM: replace-newline
+ACM:     Replace the newline character from pasted text, without confirmation.
+ACM: confirm:
+ACM:     Confirm the paste if the text to be pasted contains any terminal control codes
+ACM:     as this can be dangerous, leading to code execution if the shell/program running
+ACM:     in the terminal does not properly handle these.
+ACM: confirm-if-large
+ACM:     Confirm the paste if it is very large (larger than 16KB) as pasting
+ACM:     large amounts of text into shells can be very slow.
+ACM: filter:
+ACM:     Run the filter+AF8-paste() function from the file paste-actions.py in
+ACM:     the kitty config directory on the pasted text. The text returned by the
+ACM:     function will be actually pasted.

+ACM strip+AF8-trailing+AF8-spaces never

+ACM: Remove spaces at the end of lines when copying to clipboard. A
+ACM: value of smart will do it when using normal selections, but not
+ACM: rectangle selections. A value of always will always do it.

+ACM select+AF8-by+AF8-word+AF8-characters +AEA--./+AF8Afg?+ACYAPQAl-+-+ACM

+ACM: Characters considered part of a word when double clicking. In
+ACM: addition to these characters any character that is marked as an
+ACM: alphanumeric character in the Unicode database will be matched.

+ACM select+AF8-by+AF8-word+AF8-characters+AF8-forward

+ACM: Characters considered part of a word when extending the selection
+ACM: forward on double clicking. In addition to these characters any
+ACM: character that is marked as an alphanumeric character in the
+ACM: Unicode database will be matched.

+ACM: If empty (default) select+AF8-by+AF8-word+AF8-characters will be used for both
+ACM: directions.

+ACM click+AF8-interval -1.0

+ACM: The interval between successive clicks to detect double/triple
+ACM: clicks (in seconds). Negative numbers will use the system default
+ACM: instead, if available, or fallback to 0.5.

+ACM focus+AF8-follows+AF8-mouse no

+ACM: Set the active window to the window under the mouse when moving the
+ACM: mouse around. On macOS, this will also cause the OS Window under
+ACM: the mouse to be focused automatically when the mouse enters it.

+ACM pointer+AF8-shape+AF8-when+AF8-grabbed arrow

+ACM: The shape of the mouse pointer when the program running in the
+ACM: terminal grabs the mouse.

+ACM default+AF8-pointer+AF8-shape beam

+ACM: The default shape of the mouse pointer.

+ACM pointer+AF8-shape+AF8-when+AF8-dragging beam

+ACM: The default shape of the mouse pointer when dragging across text.

+ACM: Mouse actions +AHsAewB7

+ACM: Mouse buttons can be mapped to perform arbitrary actions. The
+ACM: syntax is:

+ACM: .. code-block:: none

+ACM:     mouse+AF8-map button-name event-type modes action

+ACM: Where button-name is one of left, middle, right, b1 ... b8 with
+ACM: added keyboard modifiers. For example: ctrl+-shift+-left refers to
+ACM: holding the Ctrl+-Shift keys while clicking with the left mouse
+ACM: button. The value b1 ... b8 can be used to refer to up to eight
+ACM: buttons on a mouse.

+ACM: event-type is one of press, release, doublepress, triplepress,
+ACM: click, doubleclick. modes indicates whether the action is performed
+ACM: when the mouse is grabbed by the program running in the terminal,
+ACM: or not. The values are grabbed or ungrabbed or a comma separated
+ACM: combination of them. grabbed refers to when the program running in
+ACM: the terminal has requested mouse events. Note that the click and
+ACM: double click events have a delay of click+AF8-interval to disambiguate
+ACM: from double and triple presses.

+ACM: You can run kitty with the kitty --debug-input command line option
+ACM: to see mouse events. See the builtin actions below to get a sense
+ACM: of what is possible.

+ACM: If you want to unmap an action, map it to no+AF8-op. For example, to
+ACM: disable opening of URLs with a plain click::

+ACM:     mouse+AF8-map left click ungrabbed no+AF8-op

+ACM: See all the mappable actions including mouse actions here
+ACM: +ADw-https://sw.kovidgoyal.net/kitty/actions/+AD4.

+ACM: .. note::
+ACM:     Once a selection is started, releasing the button that started it will
+ACM:     automatically end it and no release event will be dispatched.

+ACM clear+AF8-all+AF8-mouse+AF8-actions no

+ACM: Remove all mouse action definitions up to this point. Useful, for
+ACM: instance, to remove the default mouse actions.

+ACM: Click the link under the mouse or move the cursor

+ACM mouse+AF8-map left click ungrabbed mouse+AF8-handle+AF8-click selection link prompt

+ACM::  First check for a selection and if one exists do nothing. Then
+ACM::  check for a link under the mouse cursor and if one exists, click
+ACM::  it. Finally check if the click happened at the current shell
+ACM::  prompt and if so, move the cursor to the click location. Note
+ACM::  that this requires shell integration
+ACM::  +ADw-https://sw.kovidgoyal.net/kitty/shell-integration/+AD4 to work.

+ACM: Click the link under the mouse or move the cursor even when grabbed

+ACM mouse+AF8-map shift+-left click grabbed,ungrabbed mouse+AF8-handle+AF8-click selection link prompt

+ACM::  Same as above, except that the action is performed even when the
+ACM::  mouse is grabbed by the program running in the terminal.

+ACM: Click the link under the mouse cursor

+ACM mouse+AF8-map ctrl+-shift+-left release grabbed,ungrabbed mouse+AF8-handle+AF8-click link

+ACM::  Variant with Ctrl+-Shift is present because the simple click based
+ACM::  version has an unavoidable delay of click+AF8-interval, to
+ACM::  disambiguate clicks from double clicks.

+ACM: Discard press event for link click

+ACM mouse+AF8-map ctrl+-shift+-left press grabbed discard+AF8-event

+ACM::  Prevent this press event from being sent to the program that has
+ACM::  grabbed the mouse, as the corresponding release event is used to
+ACM::  open a URL.

+ACM: Paste from the primary selection

+ACM mouse+AF8-map middle release ungrabbed paste+AF8-from+AF8-selection

+ACM: Start selecting text

+ACM mouse+AF8-map left press ungrabbed mouse+AF8-selection normal

+ACM: Start selecting text in a rectangle

+ACM mouse+AF8-map ctrl+-alt+-left press ungrabbed mouse+AF8-selection rectangle

+ACM: Select a word

+ACM mouse+AF8-map left doublepress ungrabbed mouse+AF8-selection word

+ACM: Select a line

+ACM mouse+AF8-map left triplepress ungrabbed mouse+AF8-selection line

+ACM: Select line from point

+ACM mouse+AF8-map ctrl+-alt+-left triplepress ungrabbed mouse+AF8-selection line+AF8-from+AF8-point

+ACM::  Select from the clicked point to the end of the line. If you
+ACM::  would like to select the word at the point and then extend to the
+ACM::  rest of the line, change line+AF8-from+AF8-point to
+ACM::  word+AF8-and+AF8-line+AF8-from+AF8-point.

+ACM: Extend the current selection

+ACM mouse+AF8-map right press ungrabbed mouse+AF8-selection extend

+ACM::  If you want only the end of the selection to be moved instead of
+ACM::  the nearest boundary, use move-end instead of extend.

+ACM: Paste from the primary selection even when grabbed

+ACM mouse+AF8-map shift+-middle release ungrabbed,grabbed paste+AF8-selection
+ACM mouse+AF8-map shift+-middle press grabbed discard+AF8-event

+ACM: Start selecting text even when grabbed

+ACM mouse+AF8-map shift+-left press ungrabbed,grabbed mouse+AF8-selection normal

+ACM: Start selecting text in a rectangle even when grabbed

+ACM mouse+AF8-map ctrl+-shift+-alt+-left press ungrabbed,grabbed mouse+AF8-selection rectangle

+ACM: Select a word even when grabbed

+ACM mouse+AF8-map shift+-left doublepress ungrabbed,grabbed mouse+AF8-selection word

+ACM: Select a line even when grabbed

+ACM mouse+AF8-map shift+-left triplepress ungrabbed,grabbed mouse+AF8-selection line

+ACM: Select line from point even when grabbed

+ACM mouse+AF8-map ctrl+-shift+-alt+-left triplepress ungrabbed,grabbed mouse+AF8-selection line+AF8-from+AF8-point

+ACM::  Select from the clicked point to the end of the line even when
+ACM::  grabbed. If you would like to select the word at the point and
+ACM::  then extend to the rest of the line, change line+AF8-from+AF8-point to
+ACM::  word+AF8-and+AF8-line+AF8-from+AF8-point.

+ACM: Extend the current selection even when grabbed

+ACM mouse+AF8-map shift+-right press ungrabbed,grabbed mouse+AF8-selection extend

+ACM: Show clicked command output in pager

+ACM mouse+AF8-map ctrl+-shift+-right press ungrabbed mouse+AF8-show+AF8-command+AF8-output

+ACM::  Requires shell integration
+ACM::  +ADw-https://sw.kovidgoyal.net/kitty/shell-integration/+AD4 to work.

+ACM: +AH0AfQB9

+ACM: +AH0AfQB9

+ACM: Performance tuning +AHsAewB7

+ACM repaint+AF8-delay 10

+ACM: Delay between screen updates (in milliseconds). Decreasing it,
+ACM: increases frames-per-second (FPS) at the cost of more CPU usage.
+ACM: The default value yields +AH4-100 FPS which is more than sufficient for
+ACM: most uses. Note that to actually achieve 100 FPS, you have to
+ACM: either set sync+AF8-to+AF8-monitor to no or use a monitor with a high
+ACM: refresh rate. Also, to minimize latency when there is pending input
+ACM: to be processed, this option is ignored.

+ACM input+AF8-delay 3

+ACM: Delay before input from the program running in the terminal is
+ACM: processed (in milliseconds). Note that decreasing it will increase
+ACM: responsiveness, but also increase CPU usage and might cause flicker
+ACM: in full screen programs that redraw the entire screen on each loop,
+ACM: because kitty is so fast that partial screen updates will be drawn.

+ACM sync+AF8-to+AF8-monitor yes

+ACM: Sync screen updates to the refresh rate of the monitor. This
+ACM: prevents screen tearing
+ACM: +ADw-https://en.wikipedia.org/wiki/Screen+AF8-tearing+AD4 when scrolling.
+ACM: However, it limits the rendering speed to the refresh rate of your
+ACM: monitor. With a very high speed mouse/high keyboard repeat rate,
+ACM: you may notice some slight input latency. If so, set this to no.

+ACM: +AH0AfQB9

+ACM: Terminal bell +AHsAewB7

+ACM enable+AF8-audio+AF8-bell yes

+ACM: The audio bell. Useful to disable it in environments that require
+ACM: silence.

+ACM visual+AF8-bell+AF8-duration 0.0

+ACM: The visual bell duration (in seconds). Flash the screen when a bell
+ACM: occurs for the specified number of seconds. Set to zero to disable.

+ACM visual+AF8-bell+AF8-color none

+ACM: The color used by visual bell. Set to none will fall back to
+ACM: selection background color. If you feel that the visual bell is too
+ACM: bright, you can set it to a darker color.

+ACM window+AF8-alert+AF8-on+AF8-bell yes

+ACM: Request window attention on bell. Makes the dock icon bounce on
+ACM: macOS or the taskbar flash on linux.

+ACM bell+AF8-on+AF8-tab +ACLYPd0U +ACI

+ACM: Some text or a Unicode symbol to show on the tab if a window in the
+ACM: tab that does not have focus has a bell. If you want to use leading
+ACM: or trailing spaces, surround the text with quotes. See
+ACM: tab+AF8-title+AF8-template for how this is rendered.

+ACM: For backwards compatibility, values of yes, y and true are
+ACM: converted to the default bell symbol and no, n, false and none are
+ACM: converted to the empty string.

+ACM command+AF8-on+AF8-bell none

+ACM: Program to run when a bell occurs. The environment variable
+ACM: KITTY+AF8-CHILD+AF8-CMDLINE can be used to get the program running in the
+ACM: window in which the bell occurred.

+ACM bell+AF8-path none

+ACM: Path to a sound file to play as the bell sound. If set to none, the
+ACM: system default bell sound is used. Must be in a format supported by
+ACM: the operating systems sound API, such as WAV or OGA on Linux
+ACM: (libcanberra) or AIFF, MP3 or WAV on macOS (NSSound)

+ACM linux+AF8-bell+AF8-theme +AF8AXw-custom

+ACM: The XDG Sound Theme kitty will use to play the bell sound. Defaults
+ACM: to the custom theme name used by GNOME and Budgie, falling back to
+ACM: the default freedesktop theme if it does not exist. This option may
+ACM: be removed if Linux ever provides desktop-agnostic support for
+ACM: setting system sound themes.

+ACM: +AH0AfQB9

+ACM: Window layout +AHsAewB7

+ACM remember+AF8-window+AF8-size  yes
+ACM initial+AF8-window+AF8-width  640
+ACM initial+AF8-window+AF8-height 400

+ACM: If enabled, the OS Window size will be remembered so that new
+ACM: instances of kitty will have the same size as the previous
+ACM: instance. If disabled, the OS Window will initially have size
+ACM: configured by initial+AF8-window+AF8-width/height, in pixels. You can use a
+ACM: suffix of +ACI-c+ACI on the width/height values to have them interpreted
+ACM: as number of cells instead of pixels.

+ACM enabled+AF8-layouts +ACo

+ACM: The enabled window layouts. A comma separated list of layout names.
+ACM: The special value all means all layouts. The first listed layout
+ACM: will be used as the startup layout. Default configuration is all
+ACM: layouts in alphabetical order. For a list of available layouts, see
+ACM: the layouts +ADw-https://sw.kovidgoyal.net/kitty/overview/+ACM-layouts+AD4.

+ACM window+AF8-resize+AF8-step+AF8-cells 2
+ACM window+AF8-resize+AF8-step+AF8-lines 2

+ACM: The step size (in units of cell width/cell height) to use when
+ACM: resizing kitty windows in a layout with the shortcut
+ACM: start+AF8-resizing+AF8-window. The cells value is used for horizontal
+ACM: resizing, and the lines value is used for vertical resizing.

+ACM window+AF8-border+AF8-width 0.5pt

+ACM: The width of window borders. Can be either in pixels (px) or pts
+ACM: (pt). Values in pts will be rounded to the nearest number of pixels
+ACM: based on screen resolution. If not specified, the unit is assumed
+ACM: to be pts. Note that borders are displayed only when more than one
+ACM: window is visible. They are meant to separate multiple windows.

+ACM draw+AF8-minimal+AF8-borders yes

+ACM: Draw only the minimum borders needed. This means that only the
+ACM: borders that separate the window from a neighbor are drawn. Note
+ACM: that setting a non-zero window+AF8-margin+AF8-width overrides this and
+ACM: causes all borders to be drawn.

+ACM window+AF8-margin+AF8-width 0

+ACM: The window margin (in pts) (blank area outside the border). A
+ACM: single value sets all four sides. Two values set the vertical and
+ACM: horizontal sides. Three values set top, horizontal and bottom. Four
+ACM: values set top, right, bottom and left.

+ACM single+AF8-window+AF8-margin+AF8-width -1

+ACM: The window margin to use when only a single window is visible (in
+ACM: pts). Negative values will cause the value of window+AF8-margin+AF8-width
+ACM: to be used instead. A single value sets all four sides. Two values
+ACM: set the vertical and horizontal sides. Three values set top,
+ACM: horizontal and bottom. Four values set top, right, bottom and left.

+ACM window+AF8-padding+AF8-width 0

+ACM: The window padding (in pts) (blank area between the text and the
+ACM: window border). A single value sets all four sides. Two values set
+ACM: the vertical and horizontal sides. Three values set top, horizontal
+ACM: and bottom. Four values set top, right, bottom and left.

+ACM single+AF8-window+AF8-padding+AF8-width -1

+ACM: The window padding to use when only a single window is visible (in
+ACM: pts). Negative values will cause the value of window+AF8-padding+AF8-width
+ACM: to be used instead. A single value sets all four sides. Two values
+ACM: set the vertical and horizontal sides. Three values set top,
+ACM: horizontal and bottom. Four values set top, right, bottom and left.

+ACM placement+AF8-strategy center

+ACM: When the window size is not an exact multiple of the cell size, the
+ACM: cell area of the terminal window will have some extra padding on
+ACM: the sides. You can control how that padding is distributed with
+ACM: this option. Using a value of center means the cell area will be
+ACM: placed centrally. A value of top-left means the padding will be
+ACM: only at the bottom and right edges.

+ACM active+AF8-border+AF8-color +ACM-00ff00

+ACM: The color for the border of the active window. Set this to none to
+ACM: not draw borders around the active window.

+ACM inactive+AF8-border+AF8-color +ACM-cccccc

+ACM: The color for the border of inactive windows.

+ACM bell+AF8-border+AF8-color +ACM-ff5a00

+ACM: The color for the border of inactive windows in which a bell has
+ACM: occurred.

+ACM inactive+AF8-text+AF8-alpha 1.0

+ACM: Fade the text in inactive windows by the specified amount (a number
+ACM: between zero and one, with zero being fully faded).

+ACM hide+AF8-window+AF8-decorations no

+ACM: Hide the window decorations (title-bar and window borders) with
+ACM: yes. On macOS, titlebar-only and titlebar-and-corners can be used
+ACM: to only hide the titlebar and the rounded corners. Whether this
+ACM: works and exactly what effect it has depends on the window
+ACM: manager/operating system. Note that the effects of changing this
+ACM: option when reloading config are undefined. When using titlebar-
+ACM: only, it is useful to also set window+AF8-margin+AF8-width and
+ACM: placement+AF8-strategy to prevent the rounded corners from clipping
+ACM: text. Or use titlebar-and-corners.

+ACM window+AF8-logo+AF8-path none

+ACM: Path to a logo image. Must be in PNG format. Relative paths are
+ACM: interpreted relative to the kitty config directory. The logo is
+ACM: displayed in a corner of every kitty window. The position is
+ACM: controlled by window+AF8-logo+AF8-position. Individual windows can be
+ACM: configured to have different logos either using the launch action
+ACM: or the remote control +ADw-https://sw.kovidgoyal.net/kitty/remote-
+ACM: control/+AD4 facility.

+ACM window+AF8-logo+AF8-position bottom-right

+ACM: Where to position the window logo in the window. The value can be
+ACM: one of: top-left, top, top-right, left, center, right, bottom-left,
+ACM: bottom, bottom-right.

+ACM window+AF8-logo+AF8-alpha 0.5

+ACM: The amount the logo should be faded into the background. With zero
+ACM: being fully faded and one being fully opaque.

+ACM resize+AF8-debounce+AF8-time 0.1 0.5

+ACM: The time to wait before redrawing the screen during a live resize
+ACM: of the OS window, when no new resize events have been received,
+ACM: i.e. when resizing is either paused or finished. On platforms such
+ACM: as macOS, where the operating system sends events corresponding to
+ACM: the start and end of a live resize, the second number is used for
+ACM: redraw-after-pause since kitty can distinguish between a pause and
+ACM: end of resizing.  On such systems the first number is ignored and
+ACM: redraw is immediate after end of resize.  On other systems the
+ACM: first number is used so that kitty is +ACI-ready+ACI quickly after the end
+ACM: of resizing, while not also continuously redrawing, to save energy.

+ACM resize+AF8-in+AF8-steps no

+ACM: Resize the OS window in steps as large as the cells, instead of
+ACM: with the usual pixel accuracy. Combined with initial+AF8-window+AF8-width
+ACM: and initial+AF8-window+AF8-height in number of cells, this option can be
+ACM: used to keep the margins as small as possible when resizing the OS
+ACM: window. Note that this does not currently work on Wayland.

+ACM visual+AF8-window+AF8-select+AF8-characters 1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ

+ACM: The list of characters for visual window selection. For example,
+ACM: for selecting a window to focus on with focus+AF8-visible+AF8-window. The
+ACM: value should be a series of unique numbers or alphabets, case
+ACM: insensitive, from the set 0-9A-Z+AFw--+AD0AWwBdADs',./+AFwAXABg. Specify your
+ACM: preference as a string of characters.

+ACM confirm+AF8-os+AF8-window+AF8-close -1

+ACM: Ask for confirmation when closing an OS window or a tab with at
+ACM: least this number of kitty windows in it by window manager (e.g.
+ACM: clicking the window close button or pressing the operating system
+ACM: shortcut to close windows) or by the close+AF8-tab action. A value of
+ACM: zero disables confirmation. This confirmation also applies to
+ACM: requests to quit the entire application (all OS windows, via the
+ACM: quit action). Negative values are converted to positive ones,
+ACM: however, with shell+AF8-integration enabled, using negative values
+ACM: means windows sitting at a shell prompt are not counted, only
+ACM: windows where some command is currently running. Note that if you
+ACM: want confirmation when closing individual windows, you can map the
+ACM: close+AF8-window+AF8-with+AF8-confirmation action.

+ACM: +AH0AfQB9

+ACM: Tab bar +AHsAewB7

+ACM tab+AF8-bar+AF8-edge bottom

+ACM: The edge to show the tab bar on, top or bottom.

+ACM tab+AF8-bar+AF8-margin+AF8-width 0.0

+ACM: The margin to the left and right of the tab bar (in pts).

+ACM tab+AF8-bar+AF8-margin+AF8-height 0.0 0.0

+ACM: The margin above and below the tab bar (in pts). The first number
+ACM: is the margin between the edge of the OS Window and the tab bar.
+ACM: The second number is the margin between the tab bar and the
+ACM: contents of the current tab.

+ACM tab+AF8-bar+AF8-style fade

+ACM: The tab bar style, can be one of:

+ACM: fade
+ACM:     Each tab's edges fade into the background color. (See also tab+AF8-fade)
+ACM: slant
+ACM:     Tabs look like the tabs in a physical file.
+ACM: separator
+ACM:     Tabs are separated by a configurable separator. (See also
+ACM:     tab+AF8-separator)
+ACM: powerline
+ACM:     Tabs are shown as a continuous line with +ACI-fancy+ACI separators.
+ACM:     (See also tab+AF8-powerline+AF8-style)
+ACM: custom
+ACM:     A user-supplied Python function called draw+AF8-tab is loaded from the file
+ACM:     tab+AF8-bar.py in the kitty config directory. For examples of how to
+ACM:     write such a function, see the functions named draw+AF8-tab+AF8-with+AF8AKg in
+ACM:     kitty's source code: kitty/tab+AF8-bar.py. See also
+ACM:     this discussion +ADw-https://github.com/kovidgoyal/kitty/discussions/4447+AD4
+ACM:     for examples from kitty users.
+ACM: hidden
+ACM:     The tab bar is hidden. If you use this, you might want to create
+ACM:     a mapping for the select+AF8-tab action which presents you with a list of
+ACM:     tabs and allows for easy switching to a tab.

+ACM tab+AF8-bar+AF8-align left

+ACM: The horizontal alignment of the tab bar, can be one of: left,
+ACM: center, right.

+ACM tab+AF8-bar+AF8-min+AF8-tabs 2

+ACM: The minimum number of tabs that must exist before the tab bar is
+ACM: shown.

+ACM tab+AF8-switch+AF8-strategy previous

+ACM: The algorithm to use when switching to a tab when the current tab
+ACM: is closed. The default of previous will switch to the last used
+ACM: tab. A value of left will switch to the tab to the left of the
+ACM: closed tab. A value of right will switch to the tab to the right of
+ACM: the closed tab. A value of last will switch to the right-most tab.

+ACM tab+AF8-fade 0.25 0.5 0.75 1

+ACM: Control how each tab fades into the background when using fade for
+ACM: the tab+AF8-bar+AF8-style. Each number is an alpha (between zero and one)
+ACM: that controls how much the corresponding cell fades into the
+ACM: background, with zero being no fade and one being full fade. You
+ACM: can change the number of cells used by adding/removing entries to
+ACM: this list.

+ACM tab+AF8-separator +ACI +JQcAIg

+ACM: The separator between tabs in the tab bar when using separator as
+ACM: the tab+AF8-bar+AF8-style.

+ACM tab+AF8-powerline+AF8-style angled

+ACM: The powerline separator style between tabs in the tab bar when
+ACM: using powerline as the tab+AF8-bar+AF8-style, can be one of: angled,
+ACM: slanted, round.

+ACM tab+AF8-activity+AF8-symbol none

+ACM: Some text or a Unicode symbol to show on the tab if a window in the
+ACM: tab that does not have focus has some activity. If you want to use
+ACM: leading or trailing spaces, surround the text with quotes. See
+ACM: tab+AF8-title+AF8-template for how this is rendered.

+ACM tab+AF8-title+AF8-max+AF8-length 0

+ACM: The maximum number of cells that can be used to render the text in
+ACM: a tab. A value of zero means that no limit is applied.

+ACM tab+AF8-title+AF8-template +ACIAew-fmt.fg.red+AH0Aew-bell+AF8-symbol+AH0Aew-activity+AF8-symbol+AH0Aew-fmt.fg.tab+AH0Aew-title+AH0AIg

+ACM: A template to render the tab title. The default just renders the
+ACM: title with optional symbols for bell and activity. If you wish to
+ACM: include the tab-index as well, use something like: +AHs-index+AH0:+AHs-title+AH0.
+ACM: Useful if you have shortcuts mapped for goto+AF8-tab N. If you prefer
+ACM: to see the index as a superscript, use +AHs-sup.index+AH0. All data
+ACM: available is:

+ACM: title
+ACM:     The current tab title.
+ACM: index
+ACM:     The tab index usable with goto+AF8-tab N goto+AF8-tab shortcuts.
+ACM: layout+AF8-name
+ACM:     The current layout name.
+ACM: num+AF8-windows
+ACM:     The number of windows in the tab.
+ACM: num+AF8-window+AF8-groups
+ACM:     The number of window groups (a window group is a window and all of its overlay windows) in the tab.
+ACM: tab.active+AF8-wd
+ACM:     The working directory of the currently active window in the tab
+ACM:     (expensive, requires syscall). Use active+AF8-oldest+AF8-wd to get
+ACM:     the directory of the oldest foreground process rather than the newest.
+ACM: tab.active+AF8-exe
+ACM:     The name of the executable running in the foreground of the currently
+ACM:     active window in the tab (expensive, requires syscall). Use
+ACM:     active+AF8-oldest+AF8-exe for the oldest foreground process.
+ACM: max+AF8-title+AF8-length
+ACM:     The maximum title length available.

+ACM: Note that formatting is done by Python's string formatting
+ACM: machinery, so you can use, for instance, +AHs-layout+AF8-name+AFs:2+AF0.upper()+AH0
+ACM: to show only the first two letters of the layout name, upper-cased.
+ACM: If you want to style the text, you can use styling directives, for
+ACM: example:
+ACM: +AGAAew-fmt.fg.red+AH0-red+AHs-fmt.fg.tab+AH0-normal+AHs-fmt.bg.+AF8-00FF00+AH0-greenbg+AHs-fmt.bg.tab+AH0AYA.
+ACM: Similarly, for bold and italic:
+ACM: +AGAAew-fmt.bold+AH0-bold+AHs-fmt.nobold+AH0-normal+AHs-fmt.italic+AH0-italic+AHs-fmt.noitalic+AH0AYA.
+ACM: Note that for backward compatibility, if +AHs-bell+AF8-symbol+AH0 or
+ACM: +AHs-activity+AF8-symbol+AH0 are not present in the template, they are
+ACM: prepended to it.

+ACM active+AF8-tab+AF8-title+AF8-template none

+ACM: Template to use for active tabs. If not specified falls back to
+ACM: tab+AF8-title+AF8-template.

+ACM active+AF8-tab+AF8-foreground   +ACM-000
+ACM active+AF8-tab+AF8-background   +ACM-eee
+ACM active+AF8-tab+AF8-font+AF8-style   bold-italic
+ACM inactive+AF8-tab+AF8-foreground +ACM-444
+ACM inactive+AF8-tab+AF8-background +ACM-999
+ACM inactive+AF8-tab+AF8-font+AF8-style normal

+ACM: Tab bar colors and styles.

+ACM tab+AF8-bar+AF8-background none

+ACM: Background color for the tab bar. Defaults to using the terminal
+ACM: background color.

+ACM tab+AF8-bar+AF8-margin+AF8-color none

+ACM: Color for the tab bar margin area. Defaults to using the terminal
+ACM: background color for margins above and below the tab bar. For side
+ACM: margins the default color is chosen to match the background color
+ACM: of the neighboring tab.

+ACM: +AH0AfQB9

+ACM: Color scheme +AHsAewB7

+ACM foreground +ACM-dddddd
+ACM background +ACM-000000

+ACM: The foreground and background colors.

+ACM background+AF8-opacity 1.0

+ACM: The opacity of the background. A number between zero and one, where
+ACM: one is opaque and zero is fully transparent. This will only work if
+ACM: supported by the OS (for instance, when using a compositor under
+ACM: X11). Note that it only sets the background color's opacity in
+ACM: cells that have the same background color as the default terminal
+ACM: background, so that things like the status bar in vim, powerline
+ACM: prompts, etc. still look good. But it means that if you use a color
+ACM: theme with a background color in your editor, it will not be
+ACM: rendered as transparent. Instead you should change the default
+ACM: background color in your kitty config and not use a background
+ACM: color in the editor color scheme. Or use the escape codes to set
+ACM: the terminals default colors in a shell script to launch your
+ACM: editor. Be aware that using a value less than 1.0 is a (possibly
+ACM: significant) performance hit. When using a low value for this
+ACM: setting, it is desirable that you set the background color to a
+ACM: color the matches the general color of the desktop background, for
+ACM: best text rendering.  If you want to dynamically change
+ACM: transparency of windows, set dynamic+AF8-background+AF8-opacity to yes
+ACM: (this is off by default as it has a performance cost). Changing
+ACM: this option when reloading the config will only work if
+ACM: dynamic+AF8-background+AF8-opacity was enabled in the original config.

+ACM background+AF8-blur 0

+ACM: Set to a positive value to enable background blur (blurring of the
+ACM: visuals behind a transparent window) on platforms that support it.
+ACM: Only takes effect when background+AF8-opacity is less than one. On
+ACM: macOS, this will also control the blur radius (amount of blurring).
+ACM: Setting it to too high a value will cause severe performance issues
+ACM: and/or rendering artifacts. Usually, values up to 64 work well.
+ACM: Note that this might cause performance issues, depending on how the
+ACM: platform implements it, so use with care. Currently supported on
+ACM: macOS and KDE under X11.

+ACM background+AF8-image none

+ACM: Path to a background image. Must be in PNG format.

+ACM background+AF8-image+AF8-layout tiled

+ACM: Whether to tile, scale or clamp the background image. The value can
+ACM: be one of tiled, mirror-tiled, scaled, clamped, centered or
+ACM: cscaled. The scaled and cscaled values scale the image to the
+ACM: window size, with cscaled preserving the image aspect ratio.

+ACM background+AF8-image+AF8-linear no

+ACM: When background image is scaled, whether linear interpolation
+ACM: should be used.

+ACM dynamic+AF8-background+AF8-opacity no

+ACM: Allow changing of the background+AF8-opacity dynamically, using either
+ACM: keyboard shortcuts (increase+AF8-background+AF8-opacity and
+ACM: decrease+AF8-background+AF8-opacity) or the remote control facility.
+ACM: Changing this option by reloading the config is not supported.

+ACM background+AF8-tint 0.0

+ACM: How much to tint the background image by the background color. This
+ACM: option makes it easier to read the text. Tinting is done using the
+ACM: current background color for each window. This option applies only
+ACM: if background+AF8-opacity is set and transparent windows are supported
+ACM: or background+AF8-image is set.

+ACM background+AF8-tint+AF8-gaps 1.0

+ACM: How much to tint the background image at the window gaps by the
+ACM: background color, after applying background+AF8-tint. Since this is
+ACM: multiplicative with background+AF8-tint, it can be used to lighten the
+ACM: tint over the window gaps for a +ACo-separated+ACo look.

+ACM dim+AF8-opacity 0.4

+ACM: How much to dim text that has the DIM/FAINT attribute set. One
+ACM: means no dimming and zero means fully dimmed (i.e. invisible).

+ACM selection+AF8-foreground +ACM-000000
+ACM selection+AF8-background +ACM-fffacd

+ACM: The foreground and background colors for text selected with the
+ACM: mouse. Setting both of these to none will cause a +ACI-reverse video+ACI
+ACM: effect for selections, where the selection will be the cell text
+ACM: color and the text will become the cell background color. Setting
+ACM: only selection+AF8-foreground to none will cause the foreground color
+ACM: to be used unchanged. Note that these colors can be overridden by
+ACM: the program running in the terminal.

+ACM: The color table +AHsAewB7

+ACM: The 256 terminal colors. There are 8 basic colors, each color has a
+ACM: dull and bright version, for the first 16 colors. You can set the
+ACM: remaining 240 colors as color16 to color255.

+ACM color0 +ACM-000000
+ACM color8 +ACM-767676

+ACM: black

+ACM color1 +ACM-cc0403
+ACM color9 +ACM-f2201f

+ACM: red

+ACM color2  +ACM-19cb00
+ACM color10 +ACM-23fd00

+ACM: green

+ACM color3  +ACM-cecb00
+ACM color11 +ACM-fffd00

+ACM: yellow

+ACM color4  +ACM-0d73cc
+ACM color12 +ACM-1a8fff

+ACM: blue

+ACM color5  +ACM-cb1ed1
+ACM color13 +ACM-fd28ff

+ACM: magenta

+ACM color6  +ACM-0dcdcd
+ACM color14 +ACM-14ffff

+ACM: cyan

+ACM color7  +ACM-dddddd
+ACM color15 +ACM-ffffff

+ACM: white

+ACM mark1+AF8-foreground black

+ACM: Color for marks of type 1

+ACM mark1+AF8-background +ACM-98d3cb

+ACM: Color for marks of type 1 (light steel blue)

+ACM mark2+AF8-foreground black

+ACM: Color for marks of type 2

+ACM mark2+AF8-background +ACM-f2dcd3

+ACM: Color for marks of type 1 (beige)

+ACM mark3+AF8-foreground black

+ACM: Color for marks of type 3

+ACM mark3+AF8-background +ACM-f274bc

+ACM: Color for marks of type 3 (violet)

+ACM: +AH0AfQB9

+ACM: +AH0AfQB9

+ACM: Advanced +AHsAewB7

+ACM shell .

+ACM: The shell program to execute. The default value of . means to use
+ACM: whatever shell is set as the default shell for the current user.
+ACM: Note that on macOS if you change this, you might need to add
+ACM: --login and --interactive to ensure that the shell starts in
+ACM: interactive mode and reads its startup rc files. Environment
+ACM: variables are expanded in this setting.

+ACM editor .

+ACM: The terminal based text editor (such as vim or nano) to use when
+ACM: editing the kitty config file or similar tasks.

+ACM: The default value of . means to use the environment variables
+ACM: VISUAL and EDITOR in that order. If these variables aren't set,
+ACM: kitty will run your shell (+ACQ-SHELL -l -i -c env) to see if your
+ACM: shell startup rc files set VISUAL or EDITOR. If that doesn't work,
+ACM: kitty will cycle through various known editors (vim, emacs, etc.)
+ACM: and take the first one that exists on your system.

+ACM close+AF8-on+AF8-child+AF8-death no

+ACM: Close the window when the child process (shell) exits. With the
+ACM: default value no, the terminal will remain open when the child
+ACM: exits as long as there are still processes outputting to the
+ACM: terminal (for example disowned or backgrounded processes). When
+ACM: enabled with yes, the window will close as soon as the child
+ACM: process exits. Note that setting it to yes means that any
+ACM: background processes still using the terminal can fail silently
+ACM: because their stdout/stderr/stdin no longer work.

+ACM remote+AF8-control+AF8-password

+ACM: Allow other programs to control kitty using passwords. This option
+ACM: can be specified multiple times to add multiple passwords. If no
+ACM: passwords are present kitty will ask the user for permission if a
+ACM: program tries to use remote control with a password. A password can
+ACM: also +ACo-optionally+ACo be associated with a set of allowed remote
+ACM: control actions. For example::

+ACM:     remote+AF8-control+AF8-password +ACI-my passphrase+ACI get-colors set-colors focus-window focus-tab

+ACM: Only the specified actions will be allowed when using this
+ACM: password. Glob patterns can be used too, for example::

+ACM:     remote+AF8-control+AF8-password +ACI-my passphrase+ACI set-tab-+ACo resize-+ACo

+ACM: To get a list of available actions, run::

+ACM:     kitten +AEA --help

+ACM: A set of actions to be allowed when no password is sent can be
+ACM: specified by using an empty password. For example::

+ACM:     remote+AF8-control+AF8-password +ACIAIg +ACo--colors

+ACM: Finally, the path to a python module can be specified that provides
+ACM: a function is+AF8-cmd+AF8-allowed that is used to check every remote
+ACM: control command. For example::

+ACM:     remote+AF8-control+AF8-password +ACI-my passphrase+ACI my+AF8-rc+AF8-command+AF8-checker.py

+ACM: Relative paths are resolved from the kitty configuration directory.
+ACM: See rc+AF8-custom+AF8-auth +ADw-https://sw.kovidgoyal.net/kitty/remote-
+ACM: control/+ACM-rc-custom-auth+AD4 for details.

+ACM allow+AF8-remote+AF8-control no

+ACM: Allow other programs to control kitty. If you turn this on, other
+ACM: programs can control all aspects of kitty, including sending text
+ACM: to kitty windows, opening new windows, closing windows, reading the
+ACM: content of windows, etc. Note that this even works over SSH
+ACM: connections. The default setting of no prevents any form of remote
+ACM: control. The meaning of the various values are:

+ACM: password
+ACM:     Remote control requests received over both the TTY device and the socket
+ACM:     are confirmed based on passwords, see remote+AF8-control+AF8-password.

+ACM: socket-only
+ACM:     Remote control requests received over a socket are accepted
+ACM:     unconditionally. Requests received over the TTY are denied.
+ACM:     See listen+AF8-on.

+ACM: socket
+ACM:     Remote control requests received over a socket are accepted
+ACM:     unconditionally. Requests received over the TTY are confirmed based on
+ACM:     password.

+ACM: no
+ACM:     Remote control is completely disabled.

+ACM: yes
+ACM:     Remote control requests are always accepted.

+ACM listen+AF8-on none

+ACM: Listen to the specified socket for remote control connections. Note
+ACM: that this will apply to all kitty instances. It can be overridden
+ACM: by the kitty --listen-on command line option. For UNIX sockets,
+ACM: such as unix:+ACQAew-TEMP+AH0-/mykitty or unix:+AEA-mykitty (on Linux).
+ACM: Environment variables are expanded and relative paths are resolved
+ACM: with respect to the temporary directory. If +AHs-kitty+AF8-pid+AH0 is present,
+ACM: then it is replaced by the PID of the kitty process, otherwise the
+ACM: PID of the kitty process is appended to the value, with a hyphen.
+ACM: For TCP sockets such as tcp:localhost:0 a random port is always
+ACM: used even if a non-zero port number is specified.  See the help for
+ACM: kitty --listen-on for more details. Note that this will be ignored
+ACM: unless allow+AF8-remote+AF8-control is set to either: yes, socket or
+ACM: socket-only. Changing this option by reloading the config is not
+ACM: supported.

+ACM env

+ACM: Specify the environment variables to be set in all child processes.
+ACM: Using the name with an equal sign (e.g. env VAR+AD0) will set it to
+ACM: the empty string. Specifying only the name (e.g. env VAR) will
+ACM: remove the variable from the child process' environment. Note that
+ACM: environment variables are expanded recursively, for example::

+ACM:     env VAR1+AD0-a
+ACM:     env VAR2+AD0AJAB7-HOME+AH0-/+ACQAew-VAR1+AH0-/b

+ACM: The value of VAR2 will be +ADw-path to home directory+AD4-/a/b.

+ACM watcher

+ACM: Path to python file which will be loaded for watchers
+ACM: +ADw-https://sw.kovidgoyal.net/kitty/launch/+ACM-watchers+AD4. Can be
+ACM: specified more than once to load multiple watchers. The watchers
+ACM: will be added to every kitty window. Relative paths are resolved
+ACM: relative to the kitty config directory. Note that reloading the
+ACM: config will only affect windows created after the reload.

+ACM exe+AF8-search+AF8-path

+ACM: Control where kitty finds the programs to run. The default search
+ACM: order is: First search the system wide PATH, then +AH4-/.local/bin and
+ACM: +AH4-/bin. If still not found, the PATH defined in the login shell
+ACM: after sourcing all its startup files is tried. Finally, if present,
+ACM: the PATH specified by the env option is tried.

+ACM: This option allows you to prepend, append, or remove paths from
+ACM: this search order. It can be specified multiple times for multiple
+ACM: paths. A simple path will be prepended to the search order. A path
+ACM: that starts with the +- sign will be append to the search order,
+ACM: after +AH4-/bin above. A path that starts with the - sign will be
+ACM: removed from the entire search order. For example::

+ACM:     exe+AF8-search+AF8-path /some/prepended/path
+ACM:     exe+AF8-search+AF8-path +-/some/appended/path
+ACM:     exe+AF8-search+AF8-path -/some/excluded/path

+ACM update+AF8-check+AF8-interval 24

+ACM: The interval to periodically check if an update to kitty is
+ACM: available (in hours). If an update is found, a system notification
+ACM: is displayed informing you of the available update. The default is
+ACM: to check every 24 hours, set to zero to disable. Update checking is
+ACM: only done by the official binary builds. Distro packages or source
+ACM: builds do not do update checking. Changing this option by reloading
+ACM: the config is not supported.

+ACM startup+AF8-session none

+ACM: Path to a session file to use for all kitty instances. Can be
+ACM: overridden by using the kitty --session +AD0-none command line option
+ACM: for individual instances. See sessions
+ACM: +ADw-https://sw.kovidgoyal.net/kitty/overview/+ACM-sessions+AD4 in the kitty
+ACM: documentation for details. Note that relative paths are interpreted
+ACM: with respect to the kitty config directory. Environment variables
+ACM: in the path are expanded. Changing this option by reloading the
+ACM: config is not supported.

+ACM clipboard+AF8-control write-clipboard write-primary read-clipboard-ask read-primary-ask

+ACM: Allow programs running in kitty to read and write from the
+ACM: clipboard. You can control exactly which actions are allowed. The
+ACM: possible actions are: write-clipboard, read-clipboard, write-
+ACM: primary, read-primary, read-clipboard-ask, read-primary-ask. The
+ACM: default is to allow writing to the clipboard and primary selection
+ACM: and to ask for permission when a program tries to read from the
+ACM: clipboard. Note that disabling the read confirmation is a security
+ACM: risk as it means that any program, even the ones running on a
+ACM: remote server via SSH can read your clipboard. See also
+ACM: clipboard+AF8-max+AF8-size.

+ACM clipboard+AF8-max+AF8-size 512

+ACM: The maximum size (in MB) of data from programs running in kitty
+ACM: that will be stored for writing to the system clipboard. A value of
+ACM: zero means no size limit is applied. See also clipboard+AF8-control.

+ACM file+AF8-transfer+AF8-confirmation+AF8-bypass

+ACM: The password that can be supplied to the file transfer kitten
+ACM: +ADw-https://sw.kovidgoyal.net/kitty/kittens/transfer/+AD4 to skip the
+ACM: transfer confirmation prompt. This should only be used when
+ACM: initiating transfers from trusted computers, over trusted networks
+ACM: or encrypted transports, as it allows any programs running on the
+ACM: remote machine to read/write to the local filesystem, without
+ACM: permission.

+ACM allow+AF8-hyperlinks yes

+ACM: Process hyperlink escape sequences (OSC 8). If disabled OSC 8
+ACM: escape sequences are ignored. Otherwise they become clickable
+ACM: links, that you can click with the mouse or by using the hints
+ACM: kitten +ADw-https://sw.kovidgoyal.net/kitty/kittens/hints/+AD4. The
+ACM: special value of ask means that kitty will ask before opening the
+ACM: link when clicked.

+ACM shell+AF8-integration enabled

+ACM: Enable shell integration on supported shells. This enables features
+ACM: such as jumping to previous prompts, browsing the output of the
+ACM: previous command in a pager, etc. on supported shells. Set to
+ACM: disabled to turn off shell integration, completely. It is also
+ACM: possible to disable individual features, set to a space separated
+ACM: list of these values: no-rc, no-cursor, no-title, no-cwd, no-
+ACM: prompt-mark, no-complete, no-sudo. See Shell integration
+ACM: +ADw-https://sw.kovidgoyal.net/kitty/shell-integration/+AD4 for details.

+ACM allow+AF8-cloning ask

+ACM: Control whether programs running in the terminal can request new
+ACM: windows to be created. The canonical example is clone-in-kitty
+ACM: +ADw-https://sw.kovidgoyal.net/kitty/shell-integration/+ACM-clone-shell+AD4.
+ACM: By default, kitty will ask for permission for each clone request.
+ACM: Allowing cloning unconditionally gives programs running in the
+ACM: terminal (including over SSH) permission to execute arbitrary code,
+ACM: as the user who is running the terminal, on the computer that the
+ACM: terminal is running on.

+ACM clone+AF8-source+AF8-strategies venv,conda,env+AF8-var,path

+ACM: Control what shell code is sourced when running clone-in-kitty in
+ACM: the newly cloned window. The supported strategies are:

+ACM: venv
+ACM:     Source the file +ACQ-VIRTUAL+AF8-ENV/bin/activate. This is used by the
+ACM:     Python stdlib venv module and allows cloning venvs automatically.
+ACM: conda
+ACM:     Run conda activate +ACQ-CONDA+AF8-DEFAULT+AF8-ENV. This supports the virtual
+ACM:     environments created by conda.
+ACM: env+AF8-var
+ACM:     Execute the contents of the environment variable
+ACM:     KITTY+AF8-CLONE+AF8-SOURCE+AF8-CODE with eval.
+ACM: path
+ACM:     Source the file pointed to by the environment variable
+ACM:     KITTY+AF8-CLONE+AF8-SOURCE+AF8-PATH.

+ACM: This option must be a comma separated list of the above values.
+ACM: Only the first valid match, in the order specified, is sourced.

+ACM term xterm-kitty

+ACM: The value of the TERM environment variable to set. Changing this
+ACM: can break many terminal programs, only change it if you know what
+ACM: you are doing, not because you read some advice on +ACI-Stack Overflow+ACI
+ACM: to change it. The TERM variable is used by various programs to get
+ACM: information about the capabilities and behavior of the terminal. If
+ACM: you change it, depending on what programs you run, and how
+ACM: different the terminal you are changing it to is, various things
+ACM: from key-presses, to colors, to various advanced features may not
+ACM: work. Changing this option by reloading the config will only affect
+ACM: newly created windows.

+ACM forward+AF8-stdio no

+ACM: Forward STDOUT and STDERR of the kitty process to child processes
+ACM: as file descriptors 3 and 4. This is useful for debugging as it
+ACM: allows child processes to print to kitty's STDOUT directly. For
+ACM: example, echo hello world +AD4AJg-3 in a shell will print to the parent
+ACM: kitty's STDOUT. When enabled, this also sets the
+ACM: KITTY+AF8-STDIO+AF8-FORWARDED+AD0-3 environment variable so child processes
+ACM: know about the forwarding.

+ACM menu+AF8-map

+ACM: Specify entries for various menus in kitty. Currently only the
+ACM: global menubar on macOS is supported. For example::

+ACM:    menu+AF8-map global +ACI-Actions::Launch something special+ACI launch --hold --type+AD0-os-window sh -c +ACI-echo hello world+ACI

+ACM: This will create a menu entry named +ACI-Launch something special+ACI in
+ACM: an +ACI-Actions+ACI menu in the macOS global menubar. Sub-menus can be
+ACM: created by adding more levels separated by ::.

+ACM: +AH0AfQB9

+ACM: OS specific tweaks +AHsAewB7

+ACM wayland+AF8-titlebar+AF8-color system

+ACM: The color of the kitty window's titlebar on Wayland systems with
+ACM: client side window decorations such as GNOME. A value of system
+ACM: means to use the default system color, a value of background means
+ACM: to use the background color of the currently active window and
+ACM: finally you can use an arbitrary color, such as +ACM-12af59 or red.

+ACM macos+AF8-titlebar+AF8-color system

+ACM: The color of the kitty window's titlebar on macOS. A value of
+ACM: system means to use the default system color, light or dark can
+ACM: also be used to set it explicitly. A value of background means to
+ACM: use the background color of the currently active window and finally
+ACM: you can use an arbitrary color, such as +ACM-12af59 or red. WARNING:
+ACM: This option works by using a hack when arbitrary color (or
+ACM: background) is configured, as there is no proper Cocoa API for it.
+ACM: It sets the background color of the entire window and makes the
+ACM: titlebar transparent. As such it is incompatible with
+ACM: background+AF8-opacity. If you want to use both, you are probably
+ACM: better off just hiding the titlebar with hide+AF8-window+AF8-decorations.

+ACM macos+AF8-option+AF8-as+AF8-alt no

+ACM: Use the Option key as an Alt key on macOS. With this set to no,
+ACM: kitty will use the macOS native Option+-Key to enter Unicode
+ACM: character behavior. This will break any Alt+-Key keyboard shortcuts
+ACM: in your terminal programs, but you can use the macOS Unicode input
+ACM: technique. You can use the values: left, right or both to use only
+ACM: the left, right or both Option keys as Alt, instead. Note that
+ACM: kitty itself always treats Option the same as Alt. This means you
+ACM: cannot use this option to configure different kitty shortcuts for
+ACM: Option+-Key vs. Alt+-Key. Also, any kitty shortcuts using
+ACM: Option/Alt+-Key will take priority, so that any such key presses
+ACM: will not be passed to terminal programs running inside kitty.
+ACM: Changing this option by reloading the config is not supported.

+ACM macos+AF8-hide+AF8-from+AF8-tasks no

+ACM: Hide the kitty window from running tasks on macOS (+Ixg-+-Tab and the
+ACM: Dock). Changing this option by reloading the config is not
+ACM: supported.

+ACM macos+AF8-quit+AF8-when+AF8-last+AF8-window+AF8-closed no

+ACM: Have kitty quit when all the top-level windows are closed on macOS.
+ACM: By default, kitty will stay running, even with no open windows, as
+ACM: is the expected behavior on macOS.

+ACM macos+AF8-window+AF8-resizable yes

+ACM: Disable this if you want kitty top-level OS windows to not be
+ACM: resizable on macOS.

+ACM macos+AF8-thicken+AF8-font 0

+ACM: Draw an extra border around the font with the given width, to
+ACM: increase legibility at small font sizes on macOS. For example, a
+ACM: value of 0.75 will result in rendering that looks similar to sub-
+ACM: pixel antialiasing at common font sizes. Note that in modern kitty,
+ACM: this option is obsolete (although still supported). Consider using
+ACM: text+AF8-composition+AF8-strategy instead.

+ACM macos+AF8-traditional+AF8-fullscreen no

+ACM: Use the macOS traditional full-screen transition, that is faster,
+ACM: but less pretty.

+ACM macos+AF8-show+AF8-window+AF8-title+AF8-in all

+ACM: Control where the window title is displayed on macOS. A value of
+ACM: window will show the title of the currently active window at the
+ACM: top of the macOS window. A value of menubar will show the title of
+ACM: the currently active window in the macOS global menu bar, making
+ACM: use of otherwise wasted space. A value of all will show the title
+ACM: in both places, and none hides the title. See
+ACM: macos+AF8-menubar+AF8-title+AF8-max+AF8-length for how to control the length of the
+ACM: title in the menu bar.

+ACM macos+AF8-menubar+AF8-title+AF8-max+AF8-length 0

+ACM: The maximum number of characters from the window title to show in
+ACM: the macOS global menu bar. Values less than one means that there is
+ACM: no maximum limit.

+ACM macos+AF8-custom+AF8-beam+AF8-cursor no

+ACM: Use a custom mouse cursor for macOS that is easier to see on both
+ACM: light and dark backgrounds. Nowadays, the default macOS cursor
+ACM: already comes with a white border. WARNING: this might make your
+ACM: mouse cursor invisible on dual GPU machines. Changing this option
+ACM: by reloading the config is not supported.

+ACM macos+AF8-colorspace srgb

+ACM: The colorspace in which to interpret terminal colors. The default
+ACM: of srgb will cause colors to match those seen in web browsers. The
+ACM: value of default will use whatever the native colorspace of the
+ACM: display is. The value of displayp3 will use Apple's special
+ACM: snowflake display P3 color space, which will result in over
+ACM: saturated (brighter) colors with some color shift. Reloading
+ACM: configuration will change this value only for newly created OS
+ACM: windows.

+ACM linux+AF8-display+AF8-server auto

+ACM: Choose between Wayland and X11 backends. By default, an appropriate
+ACM: backend based on the system state is chosen automatically. Set it
+ACM: to x11 or wayland to force the choice. Changing this option by
+ACM: reloading the config is not supported.

+ACM: +AH0AfQB9

+ACM: Keyboard shortcuts +AHsAewB7

+ACM: Keys are identified simply by their lowercase Unicode characters.
+ACM: For example: a for the A key, +AFs for the left square bracket key,
+ACM: etc. For functional keys, such as Enter or Escape, the names are
+ACM: present at Functional key definitions
+ACM: +ADw-https://sw.kovidgoyal.net/kitty/keyboard-protocol/+ACM-functional+AD4.
+ACM: For modifier keys, the names are ctrl (control, +IwM), shift (+Iec), alt
+ACM: (opt, option, +IyU), super (cmd, command, +Ixg). See also: GLFW mods
+ACM: +ADw-https://www.glfw.org/docs/latest/group+AF8AXw-mods.html+AD4

+ACM: On Linux you can also use XKB key names to bind keys that are not
+ACM: supported by GLFW. See XKB keys
+ACM: +ADw-https://github.com/xkbcommon/libxkbcommon/blob/master/include/xkbcommon/xkbcommon-
+ACM: keysyms.h+AD4 for a list of key names. The name to use is the part
+ACM: after the XKB+AF8-KEY+AF8 prefix. Note that you can only use an XKB key
+ACM: name for keys that are not known as GLFW keys.

+ACM: Finally, you can use raw system key codes to map keys, again only
+ACM: for keys that are not known as GLFW keys. To see the system key
+ACM: code for a key, start kitty with the kitty --debug-input option,
+ACM: kitty will output some debug text for every key event. In that text
+ACM: look for native+AF8-code, the value of that becomes the key name in the
+ACM: shortcut. For example:

+ACM: .. code-block:: none

+ACM:     on+AF8-key+AF8-input: glfw key: 0x61 native+AF8-code: 0x61 action: PRESS mods: none text: 'a'

+ACM: Here, the key name for the A key is 0x61 and you can use it with::

+ACM:     map ctrl+-0x61 something

+ACM: to map Ctrl+-A to something.

+ACM: You can use the special action no+AF8-op to unmap a keyboard shortcut
+ACM: that is assigned in the default configuration::

+ACM:     map kitty+AF8-mod+-space no+AF8-op

+ACM: If you would like kitty to completely ignore a key event, not even
+ACM: sending it to the program running in the terminal, map it to
+ACM: discard+AF8-event::

+ACM:     map kitty+AF8-mod+-f1 discard+AF8-event

+ACM: You can combine multiple actions to be triggered by a single
+ACM: shortcut with combine action, using the syntax below::

+ACM:     map key combine +ADw-separator+AD4 action1 +ADw-separator+AD4 action2 +ADw-separator+AD4 action3 ...

+ACM: For example::

+ACM:     map kitty+AF8-mod+-e combine : new+AF8-window : next+AF8-layout

+ACM: This will create a new window and switch to the next available
+ACM: layout.

+ACM: You can use multi-key shortcuts with the syntax shown below::

+ACM:     map key1+AD4-key2+AD4-key3 action

+ACM: For example::

+ACM:     map ctrl+-f+AD4-2 set+AF8-font+AF8-size 20

+ACM: The full list of actions that can be mapped to key presses is
+ACM: available here +ADw-https://sw.kovidgoyal.net/kitty/actions/+AD4.

+ACM kitty+AF8-mod shift+-super

+ACM: Special modifier key alias for default shortcuts. You can change
+ACM: the value of this option to alter all default shortcuts that use
+ACM: kitty+AF8-mod.

clear+AF8-all+AF8-shortcuts yes

+ACM: Remove all shortcut definitions up to this point. Useful, for
+ACM: instance, to remove the default shortcuts.

+ACM action+AF8-alias

+ACM: E.g. action+AF8-alias launch+AF8-tab launch --type+AD0-tab --cwd+AD0-current

+ACM: Define action aliases to avoid repeating the same options in
+ACM: multiple mappings. Aliases can be defined for any action and will
+ACM: be expanded recursively. For example, the above alias allows you to
+ACM: create mappings to launch a new tab in the current working
+ACM: directory without duplication::

+ACM:     map f1 launch+AF8-tab vim
+ACM:     map f2 launch+AF8-tab emacs

+ACM: Similarly, to alias kitten invocation::

+ACM:     action+AF8-alias hints kitten hints --hints-offset+AD0-0

+ACM kitten+AF8-alias

+ACM: E.g. kitten+AF8-alias hints hints --hints-offset+AD0-0

+ACM: Like action+AF8-alias above, but specifically for kittens. Generally,
+ACM: prefer to use action+AF8-alias. This option is a legacy version,
+ACM: present for backwards compatibility. It causes all invocations of
+ACM: the aliased kitten to be substituted. So the example above will
+ACM: cause all invocations of the hints kitten to have the --hints-
+ACM: offset+AD0-0 option applied.

+ACM: Clipboard +AHsAewB7

+ACM: Copy to clipboard

+ACM map kitty+AF8-mod+-c copy+AF8-to+AF8-clipboard
map cmd+-c       copy+AF8-to+AF8-clipboard

+ACM::  There is also a copy+AF8-or+AF8-interrupt action that can be optionally
+ACM::  mapped to Ctrl+-C. It will copy only if there is a selection and
+ACM::  send an interrupt otherwise. Similarly,
+ACM::  copy+AF8-and+AF8-clear+AF8-or+AF8-interrupt will copy and clear the selection or
+ACM::  send an interrupt if there is no selection.

+ACM: Paste from clipboard

+ACM map kitty+AF8-mod+-v paste+AF8-from+AF8-clipboard
map cmd+-v       paste+AF8-from+AF8-clipboard

+ACM: Paste from selection

+ACM map kitty+AF8-mod+-s  paste+AF8-from+AF8-selection
+ACM map shift+-insert paste+AF8-from+AF8-selection

+ACM: Pass selection to program

+ACM map kitty+AF8-mod+-o pass+AF8-selection+AF8-to+AF8-program

+ACM::  You can also pass the contents of the current selection to any
+ACM::  program with pass+AF8-selection+AF8-to+AF8-program. By default, the system's
+ACM::  open program is used, but you can specify your own, the selection
+ACM::  will be passed as a command line argument to the program. For
+ACM::  example::

+ACM::      map kitty+AF8-mod+-o pass+AF8-selection+AF8-to+AF8-program firefox

+ACM::  You can pass the current selection to a terminal program running
+ACM::  in a new kitty window, by using the +AEA-selection placeholder::

+ACM::      map kitty+AF8-mod+-y new+AF8-window less +AEA-selection

+ACM: +AH0AfQB9

+ACM: Scrolling +AHsAewB7

+ACM: Scroll line up

+ACM map kitty+AF8-mod+-up    scroll+AF8-line+AF8-up
map cmd+-k     scroll+AF8-line+AF8-up
+ACM map opt+-cmd+-page+AF8-up scroll+AF8-line+AF8-up
+ACM map cmd+-up          scroll+AF8-line+AF8-up

+ACM: Scroll line down

+ACM map kitty+AF8-mod+-down    scroll+AF8-line+AF8-down
map cmd+-j       scroll+AF8-line+AF8-down
+ACM map opt+-cmd+-page+AF8-down scroll+AF8-line+AF8-down
+ACM map cmd+-down          scroll+AF8-line+AF8-down

+ACM: Scroll page up

map cmd+-u scroll+AF8-page+AF8-up
+ACM map cmd+-page+AF8-up       scroll+AF8-page+AF8-up

+ACM: Scroll page down

map cmd+-d scroll+AF8-page+AF8-down
+ACM map cmd+-page+AF8-down       scroll+AF8-page+AF8-down

+ACM: Scroll to top

map cmd+-shift+-u scroll+AF8-home
+ACM map cmd+-home       scroll+AF8-home

+ACM: Scroll to bottom

map cmd+-shift+-d scroll+AF8-end
+ACM map cmd+-end       scroll+AF8-end

+ACM: Scroll to previous shell prompt

map cmd+-p scroll+AF8-to+AF8-prompt -1

+ACM::  Use a parameter of 0 for scroll+AF8-to+AF8-prompt to scroll to the last
+ACM::  jumped to or the last clicked position. Requires shell
+ACM::  integration +ADw-https://sw.kovidgoyal.net/kitty/shell-integration/+AD4
+ACM::  to work.

+ACM: Scroll to next shell prompt

map cmd+-n scroll+AF8-to+AF8-prompt 1

+ACM: Browse scrollback buffer in pager

+ACM map kitty+AF8-mod+-h show+AF8-scrollback

+ACM::  You can pipe the contents of the current screen and history
+ACM::  buffer as STDIN to an arbitrary program using launch --stdin-
+ACM::  source. For example, the following opens the scrollback buffer in
+ACM::  less in an overlay window::

+ACM::      map f1 launch --stdin-source+AD0AQA-screen+AF8-scrollback --stdin-add-formatting --type+AD0-overlay less +-G -R

+ACM::  For more details on piping screen and buffer contents to external
+ACM::  programs, see launch +ADw-https://sw.kovidgoyal.net/kitty/launch/+AD4.

+ACM: Browse output of the last shell command in pager

+ACM map kitty+AF8-mod+-g show+AF8-last+AF8-command+AF8-output

+ACM::  You can also define additional shortcuts to get the command
+ACM::  output. For example, to get the first command output on screen::

+ACM::      map f1 show+AF8-first+AF8-command+AF8-output+AF8-on+AF8-screen

+ACM::  To get the command output that was last accessed by a keyboard
+ACM::  action or mouse action::

+ACM::      map f1 show+AF8-last+AF8-visited+AF8-command+AF8-output

+ACM::  You can pipe the output of the last command run in the shell
+ACM::  using the launch action. For example, the following opens the
+ACM::  output in less in an overlay window::

+ACM::      map f1 launch --stdin-source+AD0AQA-last+AF8-cmd+AF8-output --stdin-add-formatting --type+AD0-overlay less +-G -R

+ACM::  To get the output of the first command on the screen, use
+ACM::  +AEA-first+AF8-cmd+AF8-output+AF8-on+AF8-screen. To get the output of the last jumped
+ACM::  to command, use +AEA-last+AF8-visited+AF8-cmd+AF8-output.

+ACM::  Requires shell integration
+ACM::  +ADw-https://sw.kovidgoyal.net/kitty/shell-integration/+AD4 to work.

+ACM: +AH0AfQB9

+ACM: Window management +AHsAewB7

+ACM: New window

+ACM map kitty+AF8-mod+-enter new+AF8-window
map cmd+-s       launch --cwd+AD0-current

+ACM::  You can open a new kitty window running an arbitrary program, for
+ACM::  example::

+ACM::      map kitty+AF8-mod+-y launch mutt

+ACM::  You can open a new window with the current working directory set
+ACM::  to the working directory of the current window using::

+ACM::      map ctrl+-alt+-enter launch --cwd+AD0-current

+ACM::  You can open a new window that is allowed to control kitty via
+ACM::  the kitty remote control facility with launch --allow-remote-
+ACM::  control. Any programs running in that window will be allowed to
+ACM::  control kitty. For example::

+ACM::      map ctrl+-enter launch --allow-remote-control some+AF8-program

+ACM::  You can open a new window next to the currently active window or
+ACM::  as the first window, with::

+ACM::      map ctrl+-n launch --location+AD0-neighbor
+ACM::      map ctrl+-f launch --location+AD0-first

+ACM::  For more details, see launch
+ACM::  +ADw-https://sw.kovidgoyal.net/kitty/launch/+AD4.

+ACM: New OS window

+ACM map kitty+AF8-mod+-n new+AF8-os+AF8-window
+ACM map cmd+-n       new+AF8-os+AF8-window

+ACM::  Works like new+AF8-window above, except that it opens a top-level OS
+ACM::  window. In particular you can use new+AF8-os+AF8-window+AF8-with+AF8-cwd to open
+ACM::  a window with the current working directory.

+ACM: Close window

map cmd+-w close+AF8-window
+ACM map shift+-cmd+-d close+AF8-window

+ACM: Next window

map cmd+-+AF0 next+AF8-window

+ACM: Previous window

map cmd+-+AFs previous+AF8-window

+ACM: Move window forward

+ACM map kitty+AF8-mod+-f move+AF8-window+AF8-forward

+ACM: Move window backward

+ACM map kitty+AF8-mod+-b move+AF8-window+AF8-backward

+ACM: Move window to top

+ACM map kitty+AF8-mod+-+AGA move+AF8-window+AF8-to+AF8-top

+ACM: Start resizing window

+ACM map kitty+AF8-mod+-r start+AF8-resizing+AF8-window
+ACM map cmd+-r       start+AF8-resizing+AF8-window

+ACM: First window

+ACM map kitty+AF8-mod+-1 first+AF8-window
+ACM map cmd+-1       first+AF8-window

+ACM: Second window

+ACM map kitty+AF8-mod+-2 second+AF8-window
+ACM map cmd+-2       second+AF8-window

+ACM: Third window

+ACM map kitty+AF8-mod+-3 third+AF8-window
+ACM map cmd+-3       third+AF8-window

+ACM: Fourth window

+ACM map kitty+AF8-mod+-4 fourth+AF8-window
+ACM map cmd+-4       fourth+AF8-window

+ACM: Fifth window

+ACM map kitty+AF8-mod+-5 fifth+AF8-window
+ACM map cmd+-5       fifth+AF8-window

+ACM: Sixth window

+ACM map kitty+AF8-mod+-6 sixth+AF8-window
+ACM map cmd+-6       sixth+AF8-window

+ACM: Seventh window

+ACM map kitty+AF8-mod+-7 seventh+AF8-window
+ACM map cmd+-7       seventh+AF8-window

+ACM: Eighth window

+ACM map kitty+AF8-mod+-8 eighth+AF8-window
+ACM map cmd+-8       eighth+AF8-window

+ACM: Ninth window

+ACM map kitty+AF8-mod+-9 ninth+AF8-window
+ACM map cmd+-9       ninth+AF8-window

+ACM: Tenth window

+ACM map kitty+AF8-mod+-0 tenth+AF8-window

+ACM: Visually select and focus window

+ACM map kitty+AF8-mod+-f7 focus+AF8-visible+AF8-window

+ACM::  Display overlay numbers and alphabets on the window, and switch
+ACM::  the focus to the window when you press the key. When there are
+ACM::  only two windows, the focus will be switched directly without
+ACM::  displaying the overlay. You can change the overlay characters and
+ACM::  their order with option visual+AF8-window+AF8-select+AF8-characters.

+ACM: Visually swap window with another

+ACM map kitty+AF8-mod+-f8 swap+AF8-with+AF8-window

+ACM::  Works like focus+AF8-visible+AF8-window above, but swaps the window.

+ACM: +AH0AfQB9

+ACM: Tab management +AHsAewB7

+ACM: Next tab

+ACM map kitty+AF8-mod+-right next+AF8-tab
map shift+-cmd+-+AF0     next+AF8-tab
+ACM map ctrl+-tab        next+AF8-tab

+ACM: Previous tab

+ACM map kitty+AF8-mod+-left previous+AF8-tab
map shift+-cmd+-+AFs    previous+AF8-tab
+ACM map ctrl+-shift+-tab previous+AF8-tab

+ACM: New tab

+ACM map kitty+AF8-mod+-t new+AF8-tab
map cmd+-t       new+AF8-tab

+ACM: Close tab

+ACM map kitty+AF8-mod+-q close+AF8-tab
map cmd+-shift+-w       close+AF8-tab

+ACM: Close OS window

+ACM map shift+-cmd+-w close+AF8-os+AF8-window

+ACM: Move tab forward

+ACM map kitty+AF8-mod+-. move+AF8-tab+AF8-forward

+ACM: Move tab backward

+ACM map kitty+AF8-mod+-, move+AF8-tab+AF8-backward

+ACM: Set tab title

+ACM map kitty+AF8-mod+-alt+-t set+AF8-tab+AF8-title
map shift+-cmd+-r     set+AF8-tab+AF8-title


+ACM: You can also create shortcuts to go to specific tabs, with 1 being
+ACM: the first tab, 2 the second tab and -1 being the previously active
+ACM: tab, and any number larger than the last tab being the last tab::

+ACM:     map ctrl+-alt+-1 goto+AF8-tab 1
+ACM:     map ctrl+-alt+-2 goto+AF8-tab 2

+ACM: Just as with new+AF8-window above, you can also pass the name of
+ACM: arbitrary commands to run when using new+AF8-tab and new+AF8-tab+AF8-with+AF8-cwd.
+ACM: Finally, if you want the new tab to open next to the current tab
+ACM: rather than at the end of the tabs list, use::

+ACM:     map ctrl+-t new+AF8-tab +ACE-neighbor +AFs-optional cmd to run+AF0
+ACM: +AH0AfQB9

+ACM: Layout management +AHsAewB7

+ACM: Next layout

+ACM map kitty+AF8-mod+-l next+AF8-layout


+ACM: You can also create shortcuts to switch to specific layouts::

+ACM:     map ctrl+-alt+-t goto+AF8-layout tall
+ACM:     map ctrl+-alt+-s goto+AF8-layout stack

+ACM: Similarly, to switch back to the previous layout::

+ACM:     map ctrl+-alt+-p last+AF8-used+AF8-layout

+ACM: There is also a toggle+AF8-layout action that switches to the named
+ACM: layout or back to the previous layout if in the named layout.
+ACM: Useful to temporarily +ACI-zoom+ACI the active window by switching to the
+ACM: stack layout::

+ACM :     map cmd+-f toggle+AF8-layout stack
+ACM: +AH0AfQB9

+ACM: Font sizes +AHsAewB7

+ACM: You can change the font size for all top-level kitty OS windows at
+ACM: a time or only the current one.

+ACM: Increase font size

+ACM map kitty+AF8-mod+-equal  change+AF8-font+AF8-size all +-2.0
+ACM map kitty+AF8-mod+-plus   change+AF8-font+AF8-size all +-2.0
+ACM map kitty+AF8-mod+-kp+AF8-add change+AF8-font+AF8-size all +-2.0
+ACM map cmd+-plus         change+AF8-font+AF8-size all +-2.0
map cmd+-equal        change+AF8-font+AF8-size all +-2.0
+ACM map shift+-cmd+-equal  change+AF8-font+AF8-size all +-2.0

+ACM: Decrease font size

+ACM map kitty+AF8-mod+-minus       change+AF8-font+AF8-size all -2.0
+ACM map kitty+AF8-mod+-kp+AF8-subtract change+AF8-font+AF8-size all -2.0
map cmd+-minus             change+AF8-font+AF8-size all -2.0
+ACM map shift+-cmd+-minus       change+AF8-font+AF8-size all -2.0

+ACM: Reset font size

+ACM map kitty+AF8-mod+-backspace change+AF8-font+AF8-size all 0
map cmd+-0               change+AF8-font+AF8-size all 0


+ACM: To setup shortcuts for specific font sizes::

+ACM:     map kitty+AF8-mod+-f6 change+AF8-font+AF8-size all 10.0

+ACM: To setup shortcuts to change only the current OS window's font
+ACM: size::

+ACM:     map kitty+AF8-mod+-f6 change+AF8-font+AF8-size current 10.0
+ACM: +AH0AfQB9

+ACM: Select and act on visible text +AHsAewB7

+ACM: Use the hints kitten to select text and either pass it to an
+ACM: external program or insert it into the terminal or copy it to the
+ACM: clipboard.

+ACM: Open URL

map cmd+-u open+AF8-url+AF8-with+AF8-hints

+ACM::  Open a currently visible URL using the keyboard. The program used
+ACM::  to open the URL is specified in open+AF8-url+AF8-with.

+ACM: Insert selected path

map cmd+-f+AD4-p kitten hints --type path --program -

+ACM::  Select a path/filename and insert it into the terminal. Useful,
+ACM::  for instance to run git commands on a filename output from a
+ACM::  previous git command.

+ACM: Open selected path

+ACM map kitty+AF8-mod+-p+AD4-shift+-f kitten hints --type path

+ACM::  Select a path/filename and open it with the default open program.

+ACM: Insert selected line

map cmd+-f+AD4-l kitten hints --type line --program -

+ACM::  Select a line of text and insert it into the terminal. Useful for
+ACM::  the output of things like: +AGA-ls -1+AGA.

+ACM: Insert selected word

map cmd+-f+AD4-w kitten hints --type word --program -

+ACM::  Select words and insert into terminal.

+ACM: Insert selected hash

map cmd+-f+AD4-h kitten hints --type hash --program -

+ACM::  Select something that looks like a hash and insert it into the
+ACM::  terminal. Useful with git, which uses SHA1 hashes to identify
+ACM::  commits.

+ACM: Open the selected file at the selected line

map cmd+-f+AD4-n kitten hints --type linenum

+ACM::  Select something that looks like filename:linenum and open it in
+ACM::  vim at the specified line number.

+ACM: Open the selected hyperlink

+ACM map kitty+AF8-mod+-p+AD4-y kitten hints --type hyperlink

+ACM::  Select a hyperlink (i.e. a URL that has been marked as such by
+ACM::  the terminal program, for example, by +AGA-ls --hyperlink+AD0-auto+AGA).


+ACM: The hints kitten has many more modes of operation that you can map
+ACM: to different shortcuts. For a full description see hints kitten
+ACM: +ADw-https://sw.kovidgoyal.net/kitty/kittens/hints/+AD4.
+ACM: +AH0AfQB9

+ACM: Miscellaneous +AHsAewB7

+ACM: Show documentation

+ACM map kitty+AF8-mod+-f1 show+AF8-kitty+AF8-doc overview

+ACM: Toggle fullscreen

+ACM map kitty+AF8-mod+-f11 toggle+AF8-fullscreen
+ACM map ctrl+-cmd+-f    toggle+AF8-fullscreen

+ACM: Toggle maximized

+ACM map kitty+AF8-mod+-f10 toggle+AF8-maximized

+ACM: Toggle macOS secure keyboard entry

+ACM map opt+-cmd+-s toggle+AF8-macos+AF8-secure+AF8-keyboard+AF8-entry

+ACM: Unicode input

+ACM map kitty+AF8-mod+-u    kitten unicode+AF8-input
+ACM map ctrl+-cmd+-space kitten unicode+AF8-input

+ACM: Edit config file

+ACM map kitty+AF8-mod+-f2 edit+AF8-config+AF8-file
+ACM map cmd+-,        edit+AF8-config+AF8-file

+ACM: Open the kitty command shell

+ACM map kitty+AF8-mod+-escape kitty+AF8-shell window

+ACM::  Open the kitty shell in a new window / tab / overlay / os+AF8-window
+ACM::  to control kitty using commands.

+ACM: Increase background opacity

+ACM map kitty+AF8-mod+-a+AD4-m set+AF8-background+AF8-opacity +-0.1

+ACM: Decrease background opacity

+ACM map kitty+AF8-mod+-a+AD4-l set+AF8-background+AF8-opacity -0.1

+ACM: Make background fully opaque

+ACM map kitty+AF8-mod+-a+AD4-1 set+AF8-background+AF8-opacity 1

+ACM: Reset background opacity

+ACM map kitty+AF8-mod+-a+AD4-d set+AF8-background+AF8-opacity default

+ACM: Reset the terminal

+ACM map kitty+AF8-mod+-delete clear+AF8-terminal reset active
+ACM map opt+-cmd+-r        clear+AF8-terminal reset active

+ACM::  You can create shortcuts to clear/reset the terminal. For
+ACM::  example::

+ACM::      +ACM Reset the terminal
+ACM::      map f1 clear+AF8-terminal reset active
+ACM::      +ACM Clear the terminal screen by erasing all contents
+ACM::      map f1 clear+AF8-terminal clear active
+ACM::      +ACM Clear the terminal scrollback by erasing it
+ACM::      map f1 clear+AF8-terminal scrollback active
+ACM::      +ACM Scroll the contents of the screen into the scrollback
+ACM::      map f1 clear+AF8-terminal scroll active
+ACM::      +ACM Clear everything up to the line with the cursor
+ACM::      map f1 clear+AF8-terminal to+AF8-cursor active

+ACM::  If you want to operate on all kitty windows instead of just the
+ACM::  current one, use all instead of active.

+ACM::  Some useful functions that can be defined in the shell rc files
+ACM::  to perform various kinds of clearing of the current window:

+ACM::  .. code-block:: sh

+ACM::      clear-only-screen() +AHs
+ACM::          printf +ACIAXA-e+AFs-H+AFw-e+AFs-2J+ACI
+ACM::      +AH0

+ACM::      clear-screen-and-scrollback() +AHs
+ACM::          printf +ACIAXA-e+AFs-H+AFw-e+AFs-3J+ACI
+ACM::      +AH0

+ACM::      clear-screen-saving-contents-in-scrollback() +AHs
+ACM::          printf +ACIAXA-e+AFs-H+AFw-e+AFs-22J+ACI
+ACM::      +AH0

+ACM::  For instance, using these escape codes, it is possible to remap
+ACM::  Ctrl+-L to both scroll the current screen contents into the
+ACM::  scrollback buffer and clear the screen, instead of just clearing
+ACM::  the screen. For ZSH, in +AH4-/.zshrc, add:

+ACM::  .. code-block:: zsh

+ACM::      ctrl+AF8-l() +AHs
+ACM::          builtin print -rn -- +ACQ'+AFw-r+AFw-e+AFs-0J+AFw-e+AFs-H+AFw-e+AFs-22J' +AD4AIgAk-TTY+ACI
+ACM::          builtin zle .reset-prompt
+ACM::          builtin zle -R
+ACM::      +AH0
+ACM::      zle -N ctrl+AF8-l
+ACM::      bindkey '+AF4-l' ctrl+AF8-l

+ACM: Clear up to cursor line

+ACM map cmd+-k clear+AF8-terminal to+AF8-cursor active

+ACM: Reload kitty.conf

map kitty+AF8-mod+-, load+AF8-config+AF8-file
+ACM map ctrl+-cmd+-,   load+AF8-config+AF8-file

+ACM::  Reload kitty.conf, applying any changes since the last time it
+ACM::  was loaded. Note that a handful of options cannot be dynamically
+ACM::  changed and require a full restart of kitty. Particularly, when
+ACM::  changing shortcuts for actions located on the macOS global menu
+ACM::  bar, a full restart is needed. You can also map a keybinding to
+ACM::  load a different config file, for example::

+ACM::      map f5 load+AF8-config /path/to/alternative/kitty.conf

+ACM::  Note that all options from the original kitty.conf are discarded,
+ACM::  in other words the new configuration +ACo-replace+ACo the old ones.

+ACM: Debug kitty configuration

+ACM map kitty+AF8-mod+-f6 debug+AF8-config
+ACM map opt+-cmd+-,    debug+AF8-config

+ACM::  Show details about exactly what configuration kitty is running
+ACM::  with and its host environment. Useful for debugging issues.

+ACM: Send arbitrary text on key presses

+ACM::  E.g. map ctrl+-shift+-alt+-h send+AF8-text all Hello World

+ACM::  You can tell kitty to send arbitrary (UTF-8) encoded text to the
+ACM::  client program when pressing specified shortcut keys. For
+ACM::  example::

+ACM::      map ctrl+-alt+-a send+AF8-text all Special text

+ACM::  This will send +ACI-Special text+ACI when you press the Ctrl+-Alt+-A key
+ACM::  combination. The text to be sent decodes ANSI C escapes
+ACM::  +ADw-https://www.gnu.org/software/bash/manual/html+AF8-node/ANSI+AF8-002dC-
+ACM::  Quoting.html+AD4 so you can use escapes like +AFw-e to send control
+ACM::  codes or +AFw-u21fb to send Unicode characters (or you can just input
+ACM::  the Unicode characters directly as UTF-8 text). You can use
+ACM::  +AGA-kitten show+AF8-key+AGA to get the key escape codes you want to
+ACM::  emulate.

+ACM::  The first argument to send+AF8-text is the keyboard modes in which to
+ACM::  activate the shortcut. The possible values are normal,
+ACM::  application, kitty or a comma separated combination of them. The
+ACM::  modes normal and application refer to the DECCKM cursor key mode
+ACM::  for terminals, and kitty refers to the kitty extended keyboard
+ACM::  protocol. The special value all means all of them.

+ACM::  Some more examples::

+ACM::      +ACM Output a word and move the cursor to the start of the line (like typing and pressing Home)
+ACM::      map ctrl+-alt+-a send+AF8-text normal Word+AFw-e+AFs-H
+ACM::      map ctrl+-alt+-a send+AF8-text application Word+AFw-eOH
+ACM::      +ACM Run a command at a shell prompt (like typing the command and pressing Enter)
+ACM::      map ctrl+-alt+-a send+AF8-text normal,application some command with arguments+AFw-r

+ACM: Open kitty Website

+ACM map shift+-cmd+-/ open+AF8-url https://sw.kovidgoyal.net/kitty/

+ACM: Hide macOS kitty application

+ACM map cmd+-h hide+AF8-macos+AF8-app

+ACM: Hide macOS other applications

+ACM map opt+-cmd+-h hide+AF8-macos+AF8-other+AF8-apps

+ACM: Minimize macOS window

+ACM map cmd+-m minimize+AF8-macos+AF8-window

+ACM: Quit kitty

+ACM map cmd+-q quit

+ACM: +AH0AfQB9

+ACM: +AH0AfQB9

