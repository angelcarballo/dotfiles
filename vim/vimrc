" Plugins  ------------------------------------------------------------{{{

set nocompatible                          " be iMproved

" initialize vim-plug
call plug#begin('~/.vim/plugged')

" Basic plugins
Plug 'kana/vim-textobj-user'            " custom text object support
Plug 'ConradIrwin/vim-bracketed-paste'  " toggle paste mode automatically
Plug 'eiginn/netrw'                     " file manager
Plug 'tpope/vim-vinegar'                " file manager improvements
Plug 'tpope/vim-repeat'                 " extend repeat support
Plug 'tpope/vim-unimpaired'             " multiple mappings using [ & ]
Plug 'tpope/vim-sleuth'                 " auto set indent settings based on filetype

" Git
Plug 'tpope/vim-fugitive'               " git integration
Plug 'tpope/vim-rhubarb'                " github integration
Plug 'junegunn/gv.vim'                  " git commit navigation
Plug 'airblade/vim-gitgutter'           " realtime git-diff

" Languages & frameworks
Plug 'vim-ruby/vim-ruby'                " ruby integration
Plug 'ecomba/vim-ruby-refactoring'      " rails refactoring helpers
Plug 'tpope/vim-rake'                   " rake integration
Plug 'tpope/vim-rbenv'                  " rbenv integration
Plug 'tpope/vim-rails'                  " rails integration
Plug 'tpope/vim-bundler'                " bundler integration
Plug 'thoughtbot/vim-rspec'             " rspec integration
Plug 'cakebaker/scss-syntax.vim'        " SCSS syntax
Plug 'pangloss/vim-javascript'          " improved Javascript support
Plug 'othree/html5.vim'                 " HTML5 support
Plug 'mustache/vim-mustache-handlebars' " mustache support
Plug 'pprovost/vim-markdown-jekyll'     " Jekyll style markdown support
Plug 'elzr/vim-json'                    " Json support
Plug 'rodjek/vim-puppet'                " puppet support
Plug 'tmux-plugins/vim-tmux'            " tmux syntax support
Plug 'derekwyatt/vim-scala'             " Scala syntax support
Plug 'plasticboy/vim-markdown'          " markdown support
Plug 'kchmck/vim-coffee-script'         " coffeescript support
Plug 'jelera/vim-javascript-syntax'     " better javascript syntax
Plug 'leafgarland/typescript-vim'       " typescript support

" Motions & Operators
Plug 'tpope/vim-surround'               " alter surroundings (), [], '', {}
Plug 'tommcdo/vim-exchange'             " text exchange operator (cx..)
Plug 'vim-scripts/ReplaceWithRegister'  " replace command

" Text objects
Plug 'nelstrom/vim-textobj-rubyblock'   " ruby block text object
Plug 'whatyouhide/vim-textobj-erb'      " ERB block text object
Plug 'kana/vim-textobj-entire'          " entire buffer text object
Plug 'michaeljsmith/vim-indent-object'  " indentation based text object
Plug 'b4winckler/vim-angry'             " function argument text object
Plug 'glts/vim-textobj-comment'         " comment text object
Plug 'kana/vim-textobj-line'            " line text object

" Look & Feel
Plug 'yggdroot/indentLine'               " show indentation lines
Plug 'pgdouyon/vim-evanesco'             " remove search highlight on cursor move
Plug 'vim-airline/vim-airline'           " better statusline
Plug 'vim-airline/vim-airline-themes'    " themes for airline
Plug 'jeffkreeftmeijer/vim-numbertoggle' " switch to relative numbers only while on normal mode/active pane

" Navigation
Plug 'ctrlpvim/ctrlp.vim'                " fuzzy finder (files, buffers, etc.)
Plug 'bronson/vim-visual-star-search'    " search visual selected text with '*'
Plug 'terryma/vim-expand-region'         " visual expandable regions
Plug 'cyphactor/vim-open-alternate'      " open alternate files (i.e. implementation/spec)
Plug 'szw/vim-maximizer'                 " maximize/restore windows
Plug 'easymotion/vim-easymotion'         " easier motions (doh!)

" Colorschemes
Plug 'w0ng/vim-hybrid'                  " hybrid colorscheme

" Auto completion
Plug 'SirVer/ultisnips'                 " snippets support
Plug 'ervandew/supertab'                " magic code auto complete!
Plug 'tpope/vim-endwise'                " auto close for Vim blocks
Plug 'jiangmiao/auto-pairs'             " auto close for (, [, {
Plug 'docunext/closetag.vim'            " auto close for Html tags

" Third party integration
Plug 'christoomey/vim-tmux-navigator'     " navigate to tmux panes from Vim
Plug 'tmux-plugins/vim-tmux-focus-events' " detect focus when in tmux
Plug 'gabesoft/vim-ags'                   " The Silver Searcher integration
Plug 'benmills/vimux'                     " tmux integration
Plug 'ludovicchabant/vim-gutentags'       " automatic tag updater
Plug 'tpope/gem-ctags'                    " include tags from installed gems
Plug 'szw/vim-g'                          " google search

" Extras
Plug 'godlygeek/tabular'                " code align (like on this comment)
Plug 'tpope/vim-commentary'             " comment/uncomment code
Plug 'skalnik/vim-vroom'                " ruby test runner
Plug 'tpope/vim-dispatch'               " run processes on the background
Plug 'AndrewRadev/switch.vim'           " easy switches
Plug 'christoomey/vim-system-copy'      " send commands to tmux
Plug 'xolox/vim-notes'                  " easy note taking
Plug 'xolox/vim-misc'                   " required by vim-notes
Plug 'tpope/vim-eunuch'                 " run common UNIX commands for the current file
Plug 'suan/vim-instant-markdown'        " markdown preview
Plug 'AndrewRadev/splitjoin.vim'        " split/join statements
Plug 'tpope/vim-capslock'               " software caps lock


" Plugins must be added before the following line
call plug#end()

filetype plugin indent on                 " auto indent by file type

"}}}
" Plugin options ---------------------------------------------------------------{{{

"" Netrw options
let g:netrw_liststyle=0         " thin (change to 3 for tree)
let g:netrw_banner=0            " no banner
let g:netrw_altv=1              " open files on right
let g:netrw_preview=1           " open previews vertically

"" Vim-ruby options
let ruby_spellcheck_strings = 1   " enable spellcheck inside ruby strings
let ruby_minlines = 100           " avoid syntax errors while scrolling on large files

"" IndentLine options
let g:indentLine_char = 'Â·'

"" Split window on UltiSnipsEdit
let g:UltiSnipsEditSplit="horizontal"

"" UltiSnips options
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

"" Vim Json options
let g:vim_json_syntax_conceal = 0

"" Vromm configuration
let g:vroom_map_keys = 0
let g:vroom_cucumber_path = 'rspec'
let g:vroom_spec_command  = 'rspec'
let g:vroom_use_vimux = 1
let g:vroom_options={'options':'--fail-fast'}

"" Rspec configuration
let g:rspec_command = "Dispatch bundle exec rspec --fail-fast {spec}"

"" Markdown options
let g:vim_markdown_folding_disabled=1

"" Ags (The Silver Searcher)
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files
  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden
        \ --ignore .git
        \ --ignore .svn
        \ --ignore .hg
        \ --ignore .DS_Store
        \ --ignore bundle
        \ --ignore doc
        \ --ignore tmp
        \ --ignore public
        \ --ignore log
        \ --ignore spec/fixtures
        \ -g ""'
  " ag is falst enough, don't use caching
  let g:ctrlp_use_caching = 0
endif

"" Vim-Notes options
let g:notes_directories = ['~/Dropbox/notes']
let g:notes_tab_indents = 0

"" Vim-Switch options
let g:switch_custom_definitions =
      \ [
      \   ['TODO', 'DONE']
      \ ]

"" Vim-maximizer options
let g:maximizer_set_default_mapping = 1

"" Dasht options
let g:dasht_filetype_docsets = {
      \ 'ruby': ['Ruby_2', 'Ruby_On_Rails_4'],
      \ }

"" Ruby refactoring settings
let g:ruby_refactoring_map_keys=0

"" Disable easymotion default mappings
let g:EasyMotion_do_mapping = 0

"}}}
" General settings ------------------------------------------------------------{{{

" map <leader> to both <comma> and <space>
let mapleader = "\<Space>"
nmap , <leader>


set encoding=utf-8                   " use UTF8 by default
set nu                               " show line numbers
set showcmd                          " show complete commands
set ruler                            " show cursor position
set scrolloff=3                      " leave space after the current line
set foldmethod=marker                " fold using {{{ .. }}} markers
set diffopt+=vertical                " Always use vertical diffs
set mouse+=a                         " enable mouse support in (a)ll modes
set noswapfile                       " disable swap files, let git do the work
set splitright                       " Open new vertical split panes to right
set history=1000                     " max history
set undolevels=1000                  " max undo levels
set hlsearch                         " highlight search results
set incsearch                        " incremental search
set ignorecase                       " ignore case on search ...
set smartcase                        " ... except if query contains uppercase characters
set nowrap                           " don't wrap lines
set backspace=indent,eol,start       " backspace through everything
set wildmenu                         " visual auto complete for command menu
set lazyredraw                       " redraw only when needed
set formatoptions+=j                 " delete comment character when joining commented lines
set omnifunc=syntaxcomplete#Complete " enable omni completion
set timeoutlen=500                   " don't wait so long for the next keypress

au BufLeave,FocusLost * silent! wa   " autosave files
autocmd InsertLeave * set nopaste    " disable paste mode on leaving insert mode.

runtime macros/matchit.vim           " allow % to match more than just single characters

"}}}
" Look & Feel ------------------------------------------------------------------{{{

syntax enable

set background=dark
set visualbell                 " visual flash
set noerrorbells               " no flash on errors, only at beginning/end of file
set laststatus=2               " always show status bar
set listchars=tab:â¸\ ,trail:Â·  " symbols for invisible characters
set list                       " show extra whitespace

" Hybrid theme configuration
let g:hybrid_custom_term_colors = 1
let g:hybrid_reduced_contrast = 1
colorscheme hybrid

" Airline configuration
let g:airline_powerline_fonts=1
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline#extensions#hunks#enabled = 0
let g:airline#extensions#branch#displayed_head_limit = 10
let g:airline_theme='hybrid'
let g:airline#extensions#ctrlp#color_template = 'normal'
let g:airline_mode_map = {
      \ '__' : '',
      \ 'n'  : '',
      \ 'i'  : '',
      \ 'R'  : '',
      \ 'c'  : '',
      \ 'v'  : '',
      \ 'V'  : '',
      \ '' : '',
      \ 's'  : '',
      \ 'S'  : '',
      \ '' : '',
      \ }
" hide file encoding
let g:airline_section_y = airline#section#create('')

" automatically re balance windows on Vim resize
autocmd VimResized * :wincmd =

" highlight trailing spaces
match ErrorMsg '\s\+$'

" Change cursor to vertical bar (|) on insert mode
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

"}}}
" Files to ignore -------------------------------------------------------------{{{

set wildignore+=*.swp,*.bak,*.pyc,*.class,*.lock       " Common
set wildignore+=*/tmp/*,*.so,*.zip,.DS_Store           " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.zip,*.exe                  " Windows
set wildignore+=*/temp/*,*/backup/*                    " Vim
set wildignore+=*/_site/*                              " Jekyll

"}}}
" Abbreviations -------------------------------------------------------------{{{

ab bpry require 'pry'; binding.pry
ab classdescription #== Description
      \<cr>
      \<cr>
"}}}
" Skeletons -------------------------------------------------------------{{{

autocmd BufNewFile *_spec.rb 0read ~/.vim/skeleton/rspec.rb
autocmd BufNewFile *.sh 0read ~/.vim/skeleton/bash.sh
autocmd BufNewFile *factories/*.rb 0read ~/.vim/skeleton/factory_girl.rb

"}}}
" Key bindings (leader) ---------------------------------------------------------------{{{

nmap <leader><space> :CtrlP<cr>

" <leader> - Switch between the last two files
nnoremap <leader><tab> <c-^>

" / - Search in project
nnoremap <leader>/ :Ags ""<left>

" * - Search in project for word under cursor
nnoremap <leader>* :Ags ""<left><c-r><c-w><cr>

" a - Align/Auto
vnoremap <leader>aa :Tabularize /
vnoremap <leader>a= :Tabularize /=<cr>
vnoremap <leader>a> :Tabularize /=><cr>
vnoremap <leader>a<bar> :Tabularize /<bar><cr>
nnoremap <leader>ac 1z=

" b - Buffers
nnoremap <silent> <leader>bp :bprevious<cr>
nnoremap <silent> <leader>bn :bnext<cr>
nnoremap <silent> <leader>bd :bdelete<cr>
nnoremap <silent> <leader>bb :CtrlPBuffer<cr>
nnoremap <silent> <leader>bD :w <bar> %bd <bar> e#<cr>

" c - Copy/Clear
if has("mac") || has("gui_macvim") || has("gui_mac")
  " copy git branch
  nnoremap <leader>cb :let @*=fugitive#head()<cr>:echo "Git branch copied"<cr>

  " copy relative path  (src/foo.txt)
  nnoremap <leader>cf :let @*=expand("%")<cr>:echo "File path copied"<cr>

  " copy absolute path  (/something/src/foo.txt)
  nnoremap <leader>cF :let @*=expand("%:p")<cr>:echo "Full file path copied"<cr>

  " relative path with line number
  nnoremap <leader>cl :let @+=join([expand('%'),  line(".")], ':')<cr>:echo "File path including line number copied"<cr>
endif
nnoremap <silent> <leader>cs :nohl<cr>

" d - Diff/Dash
xnoremap <leader>dp :diffput<cr>
xnoremap <leader>dg :diffget<cr>

" Open documentation using <dasht>
nnoremap <silent> <Leader>dd :call Dasht([expand('<cWORD>'), expand('<cword>')])<Return>
vnoremap <silent> <Leader>dd y:<C-U>call Dasht(getreg(0))<Return>

" e - Explore
nnoremap <silent> <leader>ei :Explore<cr>
nnoremap <silent> <leader>es :Sex<cr>
nnoremap <silent> <leader>ev :Vex<cr>

" f - File/Find
nnoremap <leader>fa :OpenAlternate<cr>
nnoremap <leader>fA :vsplit<cr>:OpenAlternate<cr>
nnoremap <leader>fl <c-^>
nnoremap <leader>fs :w<cr>
nnoremap <silent> <leader>fd :CtrlPCurFile<cr>
nnoremap <silent> <leader>ff :CtrlP<cr>
nnoremap <silent> <leader>fr :CtrlPMRUFiles<cr>

" g - Git/Google
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gd :Gdiff HEAD<cr>
nnoremap <leader>gD :Gdiff master<cr>
nnoremap <leader>gp :Gpush
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>gr :Gread<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>go :Gbrowse<cr>
vnoremap <leader>go :Gbrowse<cr>
nnoremap <leader>gg :Googlef<cr>
vnoremap <leader>gg :Googlef<cr>
nnoremap <leader>gl :GV!<cr>
nnoremap <leader>gL :GV<cr>
vnoremap <leader>gl :GV<cr>

" i - Indent
nnoremap <leader>ij :%!python -m json.tool<cr>

" l - Last change (jump)
nnoremap <silent> <leader>lc `[

" n - Notes
nnoremap <leader>nr :RecentNotes<cr>
nnoremap <leader>ns :SearchNotes<space>
nnoremap <leader>nn :Note<space>
vnoremap <leader>nc :NoteFromSelectedText<space>

" o - Open
nnoremap <silent> <leader>om :Emodel<space>
nnoremap <silent> <leader>oc :Econtroller<space>
nnoremap <silent> <leader>os :Espec<space>
nnoremap <silent> <leader>oi :Einitializer<space>
nnoremap <silent> <leader>ov :Eview<space>
nnoremap <silent> <leader>oq :cw<cr>

" P - Plugins
nnoremap <leader>Pi :PlugInstall<cr>
nnoremap <leader>Pc :PlugClean<cr>
nnoremap <leader>Pu :PlugUpdate<cr>
nnoremap <leader>Pg :PlugUpgrade<cr>

" q - Quit
nnoremap <leader>q :q<cr>
nnoremap <leader>Q :qall!<cr>

" r - Remove/Refactor
nnoremap <silent> <leader>rw :%s/\s\+$//<cr>:w<cr>
vnoremap <leader>rem :RExtractMethod<cr>
vnoremap <leader>rlv :RRenameLocalVariable<cr>
vnoremap <leader>riv :RRenameInstanceVariable<cr>
vnoremap <leader>rec :RExtractConstant<cr>
nnoremap <leader>rel :RExtractLet<cr>

" s - Specs
nnoremap <leader>sf :call vroom#RunTestFile(g:vroom_options)<cr>
nnoremap <leader>sc :call vroom#RunNearestTest(g:vroom_options)<cr>
nnoremap <leader>sl :call vroom#RunLastTest()<cr>

" S - Snippets/Show
nnoremap <silent> <leader>Se :UltiSnipsEdit<cr>
nnoremap <silent> <leader>Sf :echo @%<cr>
nnoremap <silent> <leader>SF :echo expand('%:p')<cr>

" t - Tmux/Tabs

" Send visual selection to tmux
vnoremap <silent> <leader>tt :call VimuxSlime()<cr>
" Send current line to tmux
noremap <silent> <leader>tt V:call VimuxSlime()<cr>
" Send whole file to tmux
noremap <silent> <leader>tf ggVG:call VimuxSlime()<cr>
" Other tmux interactions
nnoremap <silent> <leader>to :VimuxRunCommand("")<cr>
nnoremap <silent> <leader>ti :VimuxInspectRunner<cr>
nnoremap <silent> <leader>tc :VimuxCloseRunner<cr>
nnoremap <silent> <leader>tz :VimuxZoomRunner<cr>
" Tab management
nnoremap <silent> <leader>td :tabclose<cr>
nnoremap <silent> <leader>tn :tabnew<cr>
nnoremap <silent> <leader>tj :tabnext<cr>
nnoremap <silent> <leader>tk :tabprevious<cr>

" T - Toggle
nnoremap <leader>Tw :set wrap! wrap?<cr>
nnoremap <leader>Tf :set foldenable! foldenable?<cr>
nnoremap <leader>Tr :set relativenumber! relativenumber?<cr>
nnoremap <leader>Trf :call ToggleFailFast()<cr>
nnoremap <leader>Trs :call ToggleSpring()<cr>
nnoremap <leader>Ts :setlocal spell! spelllang=en_us<cr>
nnoremap <leader>Tp :set paste! paste?<cr>

" V - Vimrc
nnoremap <leader>Ve :e $MYVIMRC<cr>
nnoremap <leader>Vs :so $MYVIMRC<cr>

" w - Windows/Tabs
nnoremap <silent> <leader>wc :wq<cr>
nnoremap <silent> <leader>wq :wq<cr>
nnoremap <silent> <leader>wC :only<cr>
nnoremap <silent> <leader>we <c-w>=
nnoremap <silent> <leader>wf :MaximizerToggle<cr>
nnoremap <silent> <leader>ws :sp<cr>
nnoremap <silent> <leader>wv :vsp<cr>
nnoremap <silent> <leader>ww <c-w>w

"}}}
" Key bindings (other) ---------------------------------------------------------------{{{

" Auto indent pasted text
nnoremap p p=`]<c-o>
nnoremap P P=`]<c-o>

" Search and replace current selection
vnoremap <c-r> "hy:%s/<c-r>h//g<left><left>

" Search visual selected text with The Silver Searcher
vnoremap <c-f> "hy:Ags "<c-r>h"<cr>

" delete lines and word from insert mode
inoremap <c-d> <esc>ddi
inoremap <c-w> <esc>bdiwi

" uppercase current word
inoremap <c-u> <esc>gUiwea

" move around using visual lines, useful when wrap is enabled
nnoremap <silent> k gk
nnoremap <silent> j gj

" quick region expand in visual mode
vmap v <Plug>(expand_region_expand)
vmap <c-v> <Plug>(expand_region_shrink)

" Use left/right to indent
nnoremap <left> <<
nnoremap <right> >>
vnoremap <left> <gv
vnoremap <right> >gv

" Use up/down to move lines/blocks
nnoremap <up> :m -2<cr>
nnoremap <down> :m +1<cr>
vnoremap <up> :m -2<cr>gv
vnoremap <down> :m '>+1<cr>gv

" Use shift+arrow keys to resize splits
" note: inside iterm2 this requires xterm key presets
nnoremap <s-up> :resize -2<cr>
nnoremap <s-down> :resize +2<cr>
nnoremap <s-left> :vertical resize -1<cr>
nnoremap <s-right> :vertical resize +2<cr>

" easyly run macros on selected lines
vnoremap @ :norm@<cr>

" make Y behave like other capitals (yank from cursor to end of line)
nnoremap Y y$

" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

" easy beginning/end of line
nnoremap H ^
nnoremap L $

"}}}
" Motions ---------------------------------------------------------------{{{

" motions for in next ..
onoremap inb :<c-u>normal! f(vi(<cr>
onoremap in( :<c-u>normal! f(vi(<cr>
onoremap in) :<c-u>normal! f(vi(<cr>
onoremap inB :<c-u>normal! f(vi(<cr>
onoremap in[ :<c-u>normal! f[vi[<cr>
onoremap in] :<c-u>normal! f[vi[<cr>
onoremap in{ :<c-u>normal! f{vi{<cr>
onoremap in} :<c-u>normal! f{vi{<cr>
onoremap in' :<c-u>normal! f'vi'<cr>
onoremap in" :<c-u>normal! f"vi"<cr>


"}}}
" Avoid extra lines at eof ---------------------------------------------------------------{{{

autocmd BufWritePre *.rb call TrimEndLines()
autocmd BufWritePre *.feature call TrimEndLines()

"}}}
" Force file types -----------------------------------------------------------------{{{

au BufRead,BufNewFile *.jbuilder setfiletype ruby

"}}}
" Type: Vim -----------------------------------------------------------------{{{

augroup vimgroup
  autocmd!
  autocmd FileType vim setlocal expandtab shiftwidth=2 tabstop=2
augroup END

"}}}
" Type: Ruby -----------------------------------------------------------------{{{

augroup rubygroup
  autocmd!
  autocmd FileType ruby setlocal expandtab shiftwidth=2 tabstop=2
  autocmd FileType ruby let b:dispatch = 'ruby %'
augroup END

"}}}
" Type: Cucumber/Turnip -----------------------------------------------------------------{{{

augroup cucumbergroup
  autocmd!
  autocmd FileType cucumber setlocal expandtab shiftwidth=2 tabstop=2
  autocmd FileType cucumber let b:dispatch = 'ruby %'
augroup END

"}}}
" Type: Python -----------------------------------------------------------------{{{

augroup pythongroup
  autocmd!
  autocmd FileType python :set tabstop=8 expandtab shiftwidth=4 softtabstop=4
augroup END

"}}}
" Type: Scala -----------------------------------------------------------------{{{

augroup scalagroup
  autocmd!
  autocmd BufRead,BufNewFile *.hocon set filetype=yaml
  autocmd FileType scala let b:dispatch = 'scala -nc %'
augroup END

"}}}
" Type: Markdown --------------------------------------------------------------{{{

augroup markdowngroup
  autocmd!
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd FileType markdown set wrap
  autocmd FileType markdown setlocal spell
augroup END

"}}}
" Type: Coffeescript --------------------------------------------------------------{{{

augroup coffeescriptgroup
  autocmd!
  autocmd Filetype coffee setl shiftwidth=2 expandtab
augroup END

"}}}
" Type: Javascript --------------------------------------------------------------{{{

augroup javascriptgroup
  autocmd!
  autocmd Filetype javascript setl shiftwidth=2 expandtab
augroup END

"}}}
" Type: Git commit (Fugitive) --------------------------------------------------------------{{{

augroup gitcommit
  autocmd!
  autocmd Filetype gitcommit set spell
augroup END

"}}}
" Type: AGS search results --------------------------------------------------------------{{{

augroup agsresults
  autocmd!
  autocmd Filetype agsv set nonu
  autocmd Filetype agsv set norelativenumber
augroup END

"}}}
