" Plugins  ------------------------------------------------------------{{{

set nocompatible                          " be iMproved, required
filetype off                              " required by Vundle

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Basic plugins
Plugin 'VundleVim/Vundle.vim'             " let Vundle manage Vundle, required
Plugin 'tpope/vim-fugitive'               " git integration
Plugin 'kien/ctrlp.vim'                   " fuzzy finder
Plugin 'tpope/vim-surround'               " alter surroundings (), [], '', {}
Plugin 'tommcdo/vim-exchange'             " text exchange operator (cx..)
Plugin 'kana/vim-textobj-user'            " custom text object support
Plugin 'ConradIrwin/vim-bracketed-paste'  " toggle paste mode automatically
Plugin 'tpope/vim-sleuth'                 " autoset indent options based on file type
Plugin 'eiginn/netrw'                     " file manager

" Languages and frameworks
Plugin 'vim-ruby/vim-ruby'                " ruby integration
Plugin 'tpope/vim-rake'                   " rake integration
Plugin 'tpope/vim-rbenv'                  " rbenv integration
Plugin 'tpope/vim-rails'                  " rails integration
Plugin 'tpope/vim-bundler'                " bundler integration
Plugin 'cakebaker/scss-syntax.vim'        " SCSS syntax
Plugin 'pangloss/vim-javascript'          " improved Javascript support
Plugin 'othree/html5.vim'                 " HTML5 support
Plugin 'mustache/vim-mustache-handlebars' " mustache support
Plugin 'pprovost/vim-markdown-jekyll'     " Jekyll style markdown support
Plugin 'elzr/vim-json'                    " Json support
Plugin 'rodjek/vim-puppet'                " puppet support
Plugin 'tmux-plugins/vim-tmux'            " tmux syntax support
Plugin 'derekwyatt/vim-scala'             " Scala syntax support
Plugin 'plasticboy/vim-markdown'          " markdown support
Plugin 'kchmck/vim-coffee-script'         " coffeescript support

" Text objects
Plugin 'nelstrom/vim-textobj-rubyblock'   " ruby block text object
Plugin 'whatyouhide/vim-textobj-erb'      " ERB block text object
Plugin 'kana/vim-textobj-entire'          " entire buffer text object
Plugin 'michaeljsmith/vim-indent-object'  " indentation based text object
Plugin 'b4winckler/vim-angry'             " function argument text object
Plugin 'glts/vim-textobj-comment'         " comment text object

" Look & Feel, Navigation
Plugin 'tpope/vim-vinegar'                 " file explorer improvements
Plugin 'yggdroot/indentLine'               " show indentation lines
Plugin 'bronson/vim-visual-star-search'    " search visual selected text with '*'
Plugin 'jeffkreeftmeijer/vim-numbertoggle' " switch to relative numbers only while on normal mode/active pane
Plugin 'terryma/vim-expand-region'         " visual expandable regions
Plugin 'cyphactor/vim-open-alternate'      " open alternate files (i.e. implementation/spec)
Plugin 'vim-scripts/BufOnly.vim'           " kill all buffers but current
Plugin 'qpkorr/vim-bufkill'                " better buffer closing/killing/unloading

" Colorschemes
Plugin 'w0ng/vim-hybrid'                  " hybrid colorscheme

" Auto completion
Plugin 'SirVer/ultisnips'                 " snippets support
Plugin 'ervandew/supertab'                " magic code auto complete!
Plugin 'tpope/vim-endwise'                " auto close for Vim blocks
Plugin 'jiangmiao/auto-pairs'             " auto close for (, [, {
Plugin 'docunext/closetag.vim'            " auto close for Html tags

" Third party integration
Plugin 'christoomey/vim-tmux-navigator'     " navigate to tmux panes from Vim
Plugin 'tmux-plugins/vim-tmux-focus-events' " detect focus when in tmux
Plugin 'gabesoft/vim-ags'                   " The Silver Searcher integration
Plugin 'benmills/vimux'                     " tmux integration
Plugin 'ludovicchabant/vim-gutentags'       " automatic tag updater
Plugin 'tpope/gem-ctags'                    " include tags from installed gems
Plugin 'rizzatti/dash.vim'                  " dash integration (documentation helper)

" Extras
Plugin 'godlygeek/tabular'                " code align (like on this comment)
Plugin 'tpope/vim-commentary'             " comment/uncomment code
Plugin 'skalnik/vim-vroom'                " ruby test runner
Plugin 'tpope/vim-dispatch'               " run processes on the background
Plugin 'airblade/vim-gitgutter'           " mealtime git-diff
Plugin 'tpope/vim-repeat'                 " extend repeat support
Plugin 'AndrewRadev/switch.vim'           " easy switches
Plugin 'christoomey/vim-system-copy'      " send commands to tmux
Plugin 'xolox/vim-notes'                  " easy note taking
Plugin 'xolox/vim-misc'                   " required by vim-notes
Plugin 'tpope/vim-eunuch'                 " run common UNIX commands for the current file
Plugin 'suan/vim-instant-markdown'        " markdown preview
Plugin 'AndrewRadev/splitjoin.vim'        " split/join statements


" Plugins must be added before the following line
call vundle#end()                         " required
filetype plugin indent on                 " auto indent by file type

"}}}
" Plugin options ---------------------------------------------------------------{{{

"" Netrw options
let g:netrw_liststyle=0         " thin (change to 3 for tree)
let g:netrw_banner=0            " no banner
let g:netrw_altv=1              " open files on right
let g:netrw_preview=1           " open previews vertically

"" Vim-ruby options
let ruby_spellcheck_strings = 1   " enable spellcheck inside ruby strings
let ruby_minlines = 100           " avoid syntax errors while scrolling on large files

"" IndentLine options
let g:indentLine_char = '·'

"" Split window on UltiSnipsEdit
let g:UltiSnipsEditSplit="horizontal"

"" UltiSnips options
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

"" Vromm configuration
let g:vroom_map_keys = 0
let g:vroom_cucumber_path = 'rspec'
let g:vroom_spec_command  = 'rspec'
let g:vroom_use_vimux = 1
let g:vroom_options={'options':'--fail-fast'}

"" Markdown options
let g:vim_markdown_folding_disabled=1

"" Ags (The Silver Searcher)
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files
  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden
        \ --ignore .git
        \ --ignore .svn
        \ --ignore .hg
        \ --ignore .DS_Store
        \ --ignore bundle
        \ --ignore doc
        \ --ignore tmp
        \ --ignore public
        \ --ignore log
        \ -g ""'
  let g:ctrlp_use_caching = 0
endif

"" Vim-Notes options
let g:notes_directories = ['~/Dropbox/notes']
let g:notes_tab_indents = 0

"" Vim-Switch options
let g:switch_custom_definitions =
      \ [
      \   ['TODO', 'DONE']
      \ ]

"}}}
" General settings ------------------------------------------------------------{{{

" map <leader> to both <comma> and <space>
let mapleader = "\<Space>"
nmap , <leader>


set encoding=utf-8                   " use UTF8 by default
set nu                               " show line numbers
set showcmd                          " show complete commands
set ruler                            " show cursor position
set scrolloff=3                      " leave space after the current line
set foldmethod=marker                " fold using {{{ .. }}} markers
set diffopt+=vertical                " Always use vertical diffs
set mouse+=a                         " enable mouse support in (a)ll modes
set noswapfile                       " disable swap files, let git do the work
set splitright                       " Open new vertical split panes to right
set history=1000                     " max history
set undolevels=1000                  " max undo levels
set hlsearch                         " highlight search results
set incsearch                        " incremental search
set ignorecase                       " ignore case on search ...
set smartcase                        " ... except if query contains uppercase characters
set nowrap                           " don't wrap lines
set backspace=indent,eol,start       " backspace through everything
set wildmenu                         " visual auto complete for command menu
set lazyredraw                       " redraw only when needed
set formatoptions+=j                 " delete comment character when joining commented lines
set omnifunc=syntaxcomplete#Complete " enable omni completion

au BufLeave,FocusLost * silent! wa   " autosave files

runtime macros/matchit.vim           " allow % to match more than just single characters

"}}}
" Look & Feel ------------------------------------------------------------------{{{

syntax enable

set background=dark
set visualbell                 " visual flash
set noerrorbells               " no flash on errors, only at beginning/end of file
set laststatus=2               " always show status bar
set listchars=tab:▸\ ,trail:·  " symbols for invisible characters
set list                       " show extra whitespace

let g:hybrid_custom_term_colors = 1
let g:hybrid_reduced_contrast = 1
colorscheme hybrid

" automatically re balance windows on Vim resize
autocmd VimResized * :wincmd =

" highlight trailing spaces
match ErrorMsg '\s\+$'

" current git branch function for status line
function! CurrentBranch()
  return exists('*fugitive#head') ? '(git:' . fugitive#head() . ')' : ''
endfunction

"recalculate the trailing whitespace warning when idle, and after saving
autocmd cursorhold,bufwritepost * unlet! b:statusline_trailing_space_warning


set statusline=
set statusline+=\[%n]                               " buffer number
set statusline+=\ %<%f                              " file path
set statusline+=\ %{CurrentBranch()}                " git branch
set statusline+=\ %m\                               " modified flag
set statusline+=\ %=\%l/%L\                         " current row/total rows
set statusline+=\ %y                                " file type
set statusline+=%#error#                            " error color
set statusline+=%{StatuslineTrailingSpaceWarning()} " trailing space warning
set statusline+=%*                                  " reset default color
set statusline+=\ %r                                " read-only flag
hi StatusLine ctermfg=15 ctermbg=8 cterm=bold
hi StatusLineNC ctermfg=15 ctermbg=8 cterm=none

" Tabs bar colors
hi TabLineFill ctermfg=8
hi TabLine ctermfg=8 ctermbg=15
hi TabLineSel ctermfg=193 ctermbg=65

"}}}
" Files to ignore -------------------------------------------------------------{{{

set wildignore+=*.swp,*.bak,*.pyc,*.class,*.lock       " Common
set wildignore+=*/tmp/*,*.so,*.zip,.DS_Store           " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.zip,*.exe                  " Windows
set wildignore+=*/temp/*,*/backup/*                    " Vim
set wildignore+=*/_site/*                              " Jekyll

"}}}
" Key bindings (leader) ---------------------------------------------------------------{{{

" <leader> - Switch between the last two files
nnoremap <leader><leader> <c-^>

" / - Search in project
nnoremap <leader>/ :Ags ""<left>

" * - Search in project for word under cursor
nnoremap <leader>* :Ags ""<left><c-r><c-w><cr>

" a - Align
vnoremap <leader>aa :Tabularize /
vnoremap <leader>a= :Tabularize /=<cr>
vnoremap <leader>a> :Tabularize /=><cr>
vnoremap <leader>a<bar> :Tabularize /<bar><cr>

" b - Buffers
nnoremap <silent> <leader>bp :bprevious<cr>
nnoremap <silent> <leader>bn :bnext<cr>
nnoremap <silent> <leader>bd :BD<cr>
nnoremap <silent> <leader>bD :Bonly<cr>
nnoremap <silent> <leader>bk :BW<cr>
nnoremap <silent> <leader>bl :buffers<cr>
nnoremap <silent> <leader>bb :CtrlPBuffer<cr>

" c - Copy/Clear
if has("mac") || has("gui_macvim") || has("gui_mac")
  " copy git branch
  nnoremap <leader>cb :let @*=fugitive#head()<cr>

  " copy relative path  (src/foo.txt)
  nnoremap <leader>cf :let @*=expand("%")<cr>

  " copy absolute path  (/something/src/foo.txt)
  nnoremap <leader>cF :let @*=expand("%:p")<cr>

  " relative path with line number
  nnoremap <leader>cl :let @+=join([expand('%'),  line(".")], ':')<cr>
endif
nnoremap <silent> <leader>cs :nohl<cr>

" d - Diff/Dash
nnoremap <leader>dd :Dash<cr>
xnoremap <leader>dp :diffput<cr>
xnoremap <leader>dg :diffget<cr>

" e - Explore
nnoremap <silent> <leader>ei :Explore<cr>
nnoremap <silent> <leader>es :Sex<cr>
nnoremap <silent> <leader>ev :Vex<cr>

" f - File
nnoremap <leader>fa :OpenAlternate<cr>
nnoremap <leader>fc :wq<cr>
nnoremap <leader>fs :w<cr>
nnoremap <silent> <leader>fd :CtrlPCurFile<cr>
nnoremap <silent> <leader>ff :CtrlP<cr>
nnoremap <silent> <leader>fr :CtrlPMRUFiles<cr>
nnoremap <silent> <leader>ft :CtrlP<cr>spec/
nnoremap <leader>fx :Dispatch<cr>

" g - Git
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gd :Gdiff HEAD<cr>
nnoremap <leader>gp :Gpush
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>gr :Gread<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>go :Gbrowse<cr>
vnoremap <leader>go :Gbrowse<cr>

" i - Indent
nnoremap <leader>ij :%!python -m json.tool<cr>

" l - Last change (jump)
nnoremap <silent> <leader>lc `[

" n - Notes
nnoremap <leader>nr :RecentNotes<cr>
nnoremap <leader>ns :SearchNotes<space>
nnoremap <leader>nn :Note<space>
vnoremap <leader>nc :NoteFromSelectedText<space>

" q - Quit
nnoremap <leader>q :q<cr>
nnoremap <leader>Q :qall!<cr>

" r - Remove
nnoremap <silent> <leader>rw :%s/\s\+$//<cr>

" s - Specs
nnoremap <silent> <leader>sa :call vroom#RunTestFile(g:vroom_options)<cr>
nnoremap <silent> <leader>sf :call vroom#RunTestFile(g:vroom_options)<cr>
nnoremap <silent> <leader>sc :call vroom#RunNearestTest(g:vroom_options)<cr>
nnoremap <silent> <leader>sl :call vroom#RunLastTest()<cr>

" S - Snippets/Show
nnoremap <silent> <leader>Se :UltiSnipsEdit<cr>
nnoremap <silent> <leader>Sf :echo @%<cr>
nnoremap <silent> <leader>SF :echo expand('%:p')<cr>

" t - Tmux

" Send visual selection to tmux
vnoremap <silent> <leader>tt :call VimuxSlime()<cr>
" Send current line to tmux
noremap <silent> <leader>tt V:call VimuxSlime()<cr>
" Send whole file to tmux
noremap <silent> <leader>tf ggVG:call VimuxSlime()<cr>
" Other tmux interactions
nnoremap <silent> <leader>to :VimuxRunCommand("")<cr>
nnoremap <silent> <leader>ti :VimuxInspectRunner<cr>
nnoremap <silent> <leader>tc :VimuxCloseRunner<cr>
nnoremap <silent> <leader>tz :VimuxZoomRunner<cr>

" T - Toggle
nnoremap <leader>Tw :set wrap! wrap?<cr>
nnoremap <leader>Tf :set foldenable! foldenable?<cr>
nnoremap <leader>Tr :set relativenumber! relativenumber?<cr>
nnoremap <leader>Trf :call ToggleFailFast()<cr>
nnoremap <leader>Trs :call ToggleSpring()<cr>
nnoremap <leader>Ts :setlocal spell! spelllang=en_us<cr>

" V - Vimrc
nnoremap <leader>Ve :e $MYVIMRC<cr>
nnoremap <leader>Vs :so $MYVIMRC<cr>

" w - Windows/Tabs
nnoremap <silent> <leader>wc :wq<cr>
nnoremap <silent> <leader>wC :only<cr>
nnoremap <silent> <leader>we <c-w>=
nnoremap <silent> <leader>wf :ZoomToggle<cr>
nnoremap <silent> <leader>ws :sp<cr>
nnoremap <silent> <leader>wtc :tabnew<cr>
nnoremap <silent> <leader>wtj :tnext<cr>
nnoremap <silent> <leader>wtk :tprevious<cr>
nnoremap <silent> <leader>wtt :tabNext<cr>
nnoremap <silent> <leader>wv :vsp<cr>
nnoremap <silent> <leader>ww <c-w>w
nnoremap <leader>wq :wq<cr>

"}}}
" Key bindings (other) ---------------------------------------------------------------{{{

nnoremap <c-p> :CtrlP<cr>

" Auto indent pasted text
nnoremap p p=`]<C-o>
nnoremap P P=`]<C-o>

" Search and replace current selection
vnoremap <C-r> "hy:%s/<C-r>h//g<left><left>

" Search visual selected text with The Silver Searcher
vnoremap <C-f> "hy:Ags "<C-r>h"<cr>

" delete lines and word from insert mode
inoremap <c-d> <esc>ddi
inoremap <c-w> <esc>bdiwi

" uppercase current word
inoremap <c-u> <esc>gUiwea

" quick beginning/end of line
nnoremap H _
nnoremap L $

" move around using visual lines, useful when wrap is enabled
nnoremap <silent> k gk
nnoremap <silent> j gj

" quick region expand in visual mode
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" resize panes with cursor keys
nnoremap <Left> :vertical resize -2<CR>
nnoremap <Right> :vertical resize +2<CR>
nnoremap <Up> :resize -2<CR>
nnoremap <Down> :resize +2<CR>

"}}}
" Motions ---------------------------------------------------------------{{{

" motions for in next ..
onoremap in( :<c-u>normal! f(vi(<cr>
onoremap in) :<c-u>normal! f(vi(<cr>
onoremap in[ :<c-u>normal! f[vi[<cr>
onoremap in] :<c-u>normal! f[vi[<cr>
onoremap in{ :<c-u>normal! f{vi{<cr>
onoremap in} :<c-u>normal! f{vi{<cr>
onoremap in' :<c-u>normal! f'vi'<cr>
onoremap in" :<c-u>normal! f"vi"<cr>


"}}}
" File type: Vim -----------------------------------------------------------------{{{

augroup rubygroup
  autocmd!
  autocmd FileType vim :set tabstop=3
augroup END

"}}}
" File type: Ruby -----------------------------------------------------------------{{{

augroup rubygroup
  autocmd!
  autocmd FileType ruby let b:dispatch = 'ruby %'
  autocmd FileType ruby :iabbrev <buffer> bpry require 'pry'; binding.pry
  autocmd FileType ruby :iabbrev <buffer> classdescription #== Description
        \<cr>
        \<cr>== Responsibilities
        \<cr>
        \<cr>== Rationale
        \<cr>
augroup END

"}}}
" File type: Scala -----------------------------------------------------------------{{{

augroup scalagroup
  autocmd!
  autocmd BufRead,BufNewFile *.hocon set filetype=yaml
  autocmd FileType scala let b:dispatch = 'scala -nc %'
augroup END

"}}}
" File type: Markdown --------------------------------------------------------------{{{

augroup markdowngroup
  autocmd!
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd FileType markdown set wrap
  autocmd FileType markdown setlocal spell
augroup END

"}}}
