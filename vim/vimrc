"" NOTES

" gu (over visual selection) -> downcase
" gU (over visual selection) -> upcase
" [Ctr-r][+]                 -> Paste from OS
" set [no]paste              -> Paste mode to avoid indentation, auto-pairs..
" ZZ (normal mode)           -> save and close
" & (normal mode)            -> repeat last substitution
" <c-o> / <c-i>              -> go to next / previous buffer
" {{{ ... }}}                -> manually mark fold region
" :9t.                       -> copy line 9 under current line
" :t9                        -> copy the current line under line 9
" windo diffthis/diffoff     -> diff current buffers/disable diff

""""""""""""""""""" VUNDLE """""""""""""""""""""

set nocompatible              " be iMproved, required
filetype off                  " required
set wildignore-=doc           " to avoid helptags errors on plugin install

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Basic plugins
Plugin 'gmarik/Vundle.vim'     " let Vundle manage Vundle, required
Plugin 'tpope/vim-fugitive'    " git integration
Plugin 'kien/ctrlp.vim'        " fuzzy finder
Plugin 'tpope/vim-surround'    " alter surroundings (), [], '', {}
Plugin 'tommcdo/vim-exchange'  " text exchange operator (cx..)
Plugin 'kana/vim-textobj-user' " custom text object support

" Languages and frameworks
Plugin 'tpope/vim-rails'                  " rails integration
Plugin 'thoughtbot/vim-rspec'             " run rspec test from vim
Plugin 'cakebaker/scss-syntax.vim'        " SCSS syntax
Plugin 'pangloss/vim-javascript'          " improved js support
Plugin 'othree/html5.vim'                 " HTML5 support
Plugin 'mustache/vim-mustache-handlebars' " mustache support
Plugin 'pprovost/vim-markdown-jekyll'     " jekyll style markdown support
Plugin 'elzr/vim-json'                    " json support
Plugin 'guns/vim-clojure-static'          " clojure support
Plugin 'nelstrom/vim-textobj-rubyblock'   " ruby block text object

" Look & Feel, Navigation
Plugin 'tpope/vim-vinegar'                " file explorer improvements
Plugin 'bling/vim-airline'                " better status bar
Plugin 'altercation/vim-colors-solarized' " soalrized colorscheme
Plugin 'yggdroot/indentLine'              " show indentation lines
Plugin 'vim-scripts/zoomWin'              " zoom support for splits

" Autocompletion
Plugin 'SirVer/ultisnips'                 " snippets support
Plugin 'ervandew/supertab'                " magic code autocomplete!
Plugin 'tpope/vim-endwise'                " autoclose for vim blocks
Plugin 'jiangmiao/auto-pairs'             " autoclose for (, [, {
Plugin 'docunext/closetag.vim'            " autoclose for html tags

" Extras
" Plugin 'scrooloose/syntastic'             " syntax checking
Plugin 'godlygeek/tabular'                " code align (like on this comment)
Plugin 'tpope/vim-commentary'             " comment/uncomment code
Plugin 'christoomey/vim-tmux-navigator'   " navigate to tmux panes from vim
Plugin 'rking/ag.vim'                     " ag searcher integration
Plugin 'tpope/vim-dispatch'               " run processes on the background
Plugin 'benmills/vimux'                   " run processes on a tmux split

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

""""""""""""""""""" /VUNDLE """""""""""""""""""""

"" Inc files are php files
augroup inc
autocmd BufRead,BufNewFile *.inc set filetype=php
augroup END

"" Md files are markdown files
augroup md
autocmd BufRead,BufNewFile *.md set filetype=markdown
augroup END

"" Dispatch default commands
autocmd FileType ruby let b:dispatch = 'ruby %'

"" General
syntax enable
set encoding=utf-8
" set hidden                " hide buffers instead of closing them
set nu                    " show line numbers
set showcmd               " show complete commands
set ruler                 " show cursor position
set scrolloff=5           " leave space after the current line
set foldmethod=marker     " fold using {{{ .. }}} markers
let mapleader=","         " map <leader> to ,
filetype plugin indent on " autoindent by file type
set mouse=a               " enable mouse support in (a)ll modes

"" Whitespace
set nowrap
set tabstop=2 shiftwidth=2     " two space tabs
set expandtab                  " use spaces instead of tabs
set backspace=indent,eol,start " backspace through everything

"" Busqueda
set hlsearch   " higlight search results
set incsearch  " incremental search
set ignorecase " ignore case on search ...
set smartcase  " ... except if query contains uppercase characters

"" Look & Feel

set background=dark
colorscheme solarized
set visualbell                 " visual flash
set noerrorbells               " no flash on errors, only al beginning/end of file
set laststatus=2               " always show status bar (Airline)
set listchars=tab:▸\ ,trail:·  " symbols for invisible characters
set list

"" Undo & Logging
set history=1000
set undolevels=1000

"" Files to ignore
set wildignore+=*.swp,*.bak,*.pyc,*.class,*.lock       " Common
set wildignore+=*/tmp/*,*.so,*.zip                     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.zip,*.exe                  " Windows
set wildignore+=*/bundle/*,*/temp/*,*/backup/*,*/doc/* " Vim
set wildignore+=*/_site/*                              " Jekyll

"" Backup paths, the double trailing slash avoids name collisions (stores the
"" "full paths instead of filenames
if has("win32")
  set backupdir=~/vimfiles/backup//
  set directory=~/vimfiles/temp//
else
  set backupdir=~/.vim/backup//
  set directory=~/.vim/temp//
endif
set noswapfile " disable swap files, let git do the work

"" Activate matchit
runtime macros/matchit.vim

" Make the 81st column stand out
highlight ColorColumn ctermbg=black
call matchadd('ColorColumn', '\%81v', 100)


" Abbreviations
ab tilde ~

"""""""" Plugin Options """"""""

"" Vim-Rspec, call specs on a tmux pane with vimux
let g:rspec_command = "call VimuxRunCommand(\"bundle exec rspec {spec}\")"

"" IndentLine options
let g:indentLine_char = '·'

"" Split window on UltiSnipsEdit
let g:UltiSnipsEditSplit="horizontal"

"" UltiSnips options
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsListSnippet="<c-º>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

"" Airline options
let g:airline_powerline_fonts = 1

"""""""" Mappings """"""""

" Quickly edit/source the vimrc file
nmap <silent> <leader>eV :e $MYVIMRC<CR>
nmap <silent> <leader>sV :so $MYVIMRC<CR>

" Quickly edit snippets
nmap <silent> <leader>es :UltiSnipsEdit<CR>

" RSpec.vim mappings
map <Leader>tf :call RunCurrentSpecFile()<CR>
map <Leader>tc :call RunNearestSpec()<CR>
map <Leader>tl :call RunLastSpec()<CR>
map <Leader>ta :call RunAllSpecs()<CR>

" Open File Explorer
nmap <silent> <leader>ei :Explore<CR>
nmap <silent> <leader>es :Sex<CR>
nmap <silent> <leader>ev :Vex<CR>

" Zoom
nmap <silent> <leader>f :ZoomWin<CR>

" Remove Trailing Whitespace
nmap <silent> <leader>rw :%s/\s\+$//<CR>

" Better tab navigation
nmap <silent> <leader>et :Texplore<CR>

" Execute dispatch for current file (based on filetype)
map <Leader>x :Dispatch<CR>

" Toggle Syntastic
" nmap <silent> <leader>ts :SyntasticToggleMode<CR>
