" Plugins  ------------------------------------------------------------{{{

set nocompatible                          " be iMproved, required
filetype off                              " required by Vundle

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Basic plugins
Plugin 'VundleVim/Vundle.vim'             " let Vundle manage Vundle, required
Plugin 'tpope/vim-fugitive'               " git integration
Plugin 'kien/ctrlp.vim'                   " fuzzy finder
Plugin 'tpope/vim-surround'               " alter surroundings (), [], '', {}
Plugin 'tommcdo/vim-exchange'             " text exchange operator (cx..)
Plugin 'kana/vim-textobj-user'            " custom text object support
Plugin 'ConradIrwin/vim-bracketed-paste'  " toggle paste mode automatically
Plugin 'tpope/vim-sleuth'                 " autoset indent options based on file type

" Languages and frameworks
Plugin 'vim-ruby/vim-ruby'                " ruby integration
Plugin 'tpope/vim-rake'                   " rake integration
Plugin 'tpope/vim-rbenv'                  " rbenv integration
Plugin 'tpope/vim-rails'                  " rails integration
Plugin 'tpope/vim-bundler'                " bundler integration
Plugin 'cakebaker/scss-syntax.vim'        " SCSS syntax
Plugin 'pangloss/vim-javascript'          " improved js support
Plugin 'othree/html5.vim'                 " HTML5 support
Plugin 'mustache/vim-mustache-handlebars' " mustache support
Plugin 'pprovost/vim-markdown-jekyll'     " jekyll style markdown support
Plugin 'elzr/vim-json'                    " json support
Plugin 'rodjek/vim-puppet'                " puppet support
Plugin 'tmux-plugins/vim-tmux'            " tmux syntax support
Plugin 'derekwyatt/vim-scala'             " scala syntax support
Plugin 'plasticboy/vim-markdown'          " markdown support

" Text objects
Plugin 'nelstrom/vim-textobj-rubyblock'   " ruby block text object
Plugin 'whatyouhide/vim-textobj-erb'      " erb block text object
Plugin 'kana/vim-textobj-entire'          " entire buffer text object
Plugin 'michaeljsmith/vim-indent-object'  " indentation based text object

" Look & Feel, Navigation
Plugin 'tpope/vim-vinegar'                 " file explorer improvements
Plugin 'yggdroot/indentLine'               " show indentation lines
Plugin 'bronson/vim-visual-star-search'    " search visual selected text with '*'
Plugin 'jeffkreeftmeijer/vim-numbertoggle' " switch to relative numbers only while on normal mode/active pane
Plugin 'terryma/vim-expand-region'         " visual expandable regions
Plugin 'cyphactor/vim-open-alternate'      " open alternate files (i.e. implementation/spec)

" Colorschemes
Plugin 'w0ng/vim-hybrid'                  " hybrid colorscheme

" Autocompletion
Plugin 'SirVer/ultisnips'                 " snippets support
Plugin 'ervandew/supertab'                " magic code autocomplete!
Plugin 'tpope/vim-endwise'                " autoclose for vim blocks
Plugin 'jiangmiao/auto-pairs'             " autoclose for (, [, {
Plugin 'docunext/closetag.vim'            " autoclose for html tags
Plugin 'mattn/webapi-vim'                 " call external api's
Plugin 'christoomey/vim-quicklink'        " quick get links via google [C-k]

" Third party integration
Plugin 'christoomey/vim-tmux-navigator'     " navigate to tmux panes from vim
Plugin 'tmux-plugins/vim-tmux-focus-events' " detect focus when in tmux
Plugin 'gabesoft/vim-ags'                   " ag searcher integration
Plugin 'benmills/vimux'                     " tmux intergation
Plugin 'ludovicchabant/vim-gutentags'       " automatic tag updater
Plugin 'tpope/gem-ctags'                    " include tags from installed gems
Plugin 'rizzatti/dash.vim'                  " dash integration (documentation helper)

" Extras
Plugin 'godlygeek/tabular'                " code align (like on this comment)
Plugin 'tpope/vim-commentary'             " comment/uncomment code
Plugin 'skalnik/vim-vroom'                " ruby test runner
Plugin 'tpope/vim-dispatch'               " run processes on the background
Plugin 'airblade/vim-gitgutter'           " realtime git-diff
Plugin 'tpope/vim-repeat'                 " extend repeat support
Plugin 'AndrewRadev/switch.vim'           " easy switches
Plugin 'christoomey/vim-system-copy'      " send commands to tmux
Plugin 'xolox/vim-notes'                  " easy note taking
Plugin 'xolox/vim-misc'                   " required by vim-notes
Plugin 'tpope/vim-eunuch'                 " run common UNIX commands for the current file
Plugin 'suan/vim-instant-markdown'        " markdown preview
Plugin 'AndrewRadev/splitjoin.vim'        " splip/join statements


" All of your Plugins must be added before the following line
call vundle#end()                         " required
filetype plugin indent on                 " required

"}}}
" Plugin options ---------------------------------------------------------------{{{

"" Vim-ruby options
let ruby_spellcheck_strings = 1   " enable spellcheck inside ruby strings
let ruby_minlines = 100           " avoid syntax errors while scrolling on large files

"" IndentLine options
let g:indentLine_char = '·'

"" Split window on UltiSnipsEdit
let g:UltiSnipsEditSplit="horizontal"

"" UltiSnips options
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

"" Vromm configuration
let g:vroom_map_keys = 0
let g:vroom_cucumber_path = 'spring rspec --fail-fast'
let g:vroom_spec_command  = 'spring rspec --fail-fast'
let g:vroom_use_vimux  = 1

"" Markdown options
let g:vim_markdown_folding_disabled=1

"" Ags (The Silver Searcher)
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files
  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden
        \ --ignore .git
        \ --ignore .svn
        \ --ignore .hg
        \ --ignore .DS_Store
        \ --ignore bundle
        \ --ignore doc
        \ --ignore tmp
        \ --ignore public
        \ --ignore log
        \ -g ""'
  let g:ctrlp_use_caching = 0
endif

"" Vim-Notes options
let g:notes_directories = ['~/Dropbox/notes']
let g:notes_tab_indents = 0
let g:notes_smart_quotes = 0

"}}}
" General settings ------------------------------------------------------------{{{

syntax enable
let mapleader = "\<Space>"      " map <leader> to SPACE
let g:netrw_liststyle=0         " thin (change to 3 for tree)
let g:netrw_banner=0            " no banner
let g:netrw_altv=1              " open files on right
let g:netrw_preview=1           " open previews vertically
filetype plugin indent on       " autoindent by file type
set encoding=utf-8              " use UTF8 by default
set nu                          " show line numbers
set showcmd                     " show complete commands
set ruler                       " show cursor position
set scrolloff=5                 " leave space after the current line
set foldmethod=marker           " fold using {{{ .. }}} markers
set diffopt+=vertical           " Always use vertical diffs
set mouse+=a                    " enable mouse support in (a)ll modes
set noswapfile                  " disable swap files, let git do the work
set splitright                  " Open new vertical split panes to right
set history=1000                " max history
set undolevels=1000             " max undo levels
set hlsearch                    " higlight search results
set incsearch                   " incremental search
set ignorecase                  " ignore case on search ...
set smartcase                   " ... except if query contains uppercase characters
set nowrap                      " dont wrap lines
set backspace=indent,eol,start  " backspace through everything
set wildmenu                    " visual autocomplete for command menu
set lazyredraw                  " redraw only when needed
set formatoptions+=j            " delete comment character when joining commented lines"

runtime macros/matchit.vim      " allow % to match more than just single characters

if &term =~ '^screen'
  set ttymouse=xterm2           " tmux knows the extended mouse mode
endif

"}}}
" Look & Feel ------------------------------------------------------------------{{{

set background=dark
set visualbell                 " visual flash
set noerrorbells               " no flash on errors, only al beginning/end of file
set laststatus=2               " always show status bar
set listchars=tab:▸\ ,trail:·  " symbols for invisible characters
set list                       " show extra whitespace

let g:hybrid_custom_term_colors = 1
let g:hybrid_reduced_contrast = 1
colorscheme hybrid

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" higlight trailing spaces
match ErrorMsg '\s\+$'

" current git branch function for statusline
function! CurrentBranch()
  return exists('*fugitive#head') ? '  ' . fugitive#head() . ' ' : ''
endfunction

"recalculate the trailing whitespace warning when idle, and after saving
autocmd cursorhold,bufwritepost * unlet! b:statusline_trailing_space_warning

" trailing space detection for statusline
function! StatuslineTrailingSpaceWarning()
  if !exists("b:statusline_trailing_space_warning")
    if search('\s\+$', 'nw') != 0
      let b:statusline_trailing_space_warning = ' Trailing space '
    else
      let b:statusline_trailing_space_warning = ''
    endif
  endif
  return b:statusline_trailing_space_warning
endfunction

set statusline=
set statusline+=\ %<%f%m\                           " file path, modified flag
set statusline+=\ %=\%l/%L\                         " current row/total rows
set statusline+=%#error#                            " error color
set statusline+=%{StatuslineTrailingSpaceWarning()} " trailing space warning
set statusline+=%*                                  " reset default color
set statusline+=\ %r                                " read-only flag
set statusline+=\ %{CurrentBranch()}                " git branch
hi StatusLine ctermfg=15 ctermbg=8 cterm=bold
hi StatusLineNC ctermfg=15 ctermbg=8 cterm=none

" tabbar colors
hi TabLineFill ctermfg=8
hi TabLine ctermfg=8 ctermbg=15
hi TabLineSel ctermfg=193 ctermbg=65

"}}}
" Files to ignore -------------------------------------------------------------{{{

set wildignore+=*.swp,*.bak,*.pyc,*.class,*.lock       " Common
set wildignore+=*/tmp/*,*.so,*.zip                     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.zip,*.exe                  " Windows
set wildignore+=*/temp/*,*/backup/*                    " Vim
set wildignore+=*/_site/*                              " Jekyll

"}}}
" Custom functions ---------------------------------------------------------------{{{

"""""""" Zoom panes """"""""""
function! s:ZoomToggle() abort
  if exists('t:zoomed') && t:zoomed
    execute t:zoom_winrestcmd
    let t:zoomed = 0
  else
    let t:zoom_winrestcmd = winrestcmd()
    resize
    vertical resize
    let t:zoomed = 1
  endif
endfunction
command! ZoomToggle call s:ZoomToggle()
nnoremap <silent> <leader>f :ZoomToggle<cr>

"""""""" Copy current file path """"""""""
if has("mac") || has("gui_macvim") || has("gui_mac")
  " relative path  (src/foo.txt)
  nnoremap <leader>cf :let @*=expand("%")<cr>

  " absolute path  (/something/src/foo.txt)
  nnoremap <leader>cF :let @*=expand("%:p")<cr>

  " relative path with line number
  nnoremap <leader>cl :let @+=join([expand('%'),  line(".")], ':')<cr>
endif

"""""""" Send text to tmux """"""""""
function! VimuxSlime() range
  let cmds = join(getline("'<","'>"), '')
  call VimuxRunCommand(cmds)
endfunction

"}}}
"Keybindings (leader) ---------------------------------------------------------------{{{

" <leader> - Switch between the last two files
nnoremap <leader><leader> <c-^>

" / - Search in project
nnoremap <leader>/ :Ags ""<left>

" * - Search in project for word under cursor
nnoremap <leader>* :Ags ""<left><c-r><c-w><cr>

" a - Alternate file
nnoremap <silent> <leader>a :OpenAlternate<cr>

" b - Buffers
nnoremap <silent> <leader>bp :bprevious<cr>
nnoremap <silent> <leader>bn :bnext<cr>
nnoremap <silent> <leader>bb :CtrlPBuffer<cr>

" c - Clear
nnoremap <silent> <leader>cs :nohl<cr>

" d - Dash (open documentation for keyword)
nnoremap <leader>d :Dash<cr>

" e - Explore
nnoremap <silent> <leader>ei :Explore<cr>
nnoremap <silent> <leader>es :Sex<cr>
nnoremap <silent> <leader>ev :Vex<cr>

" f - File
nnoremap <leader>fs :w<cr>
nnoremap <leader>fc :wq<cr>
nnoremap <silent> <leader>ff :CtrlP<cr>

" g - Git
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gp :Gpush
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>gr :Gread<cr>
nnoremap <leader>gb :Gbrowse<cr>
vnoremap <leader>gb :Gbrowse<cr>

" i - Indent
nnoremap <leader>ij :%!python -m json.tool<cr>

" l - Last change (jump)
nnoremap <silent> <leader>lc `[

" n - Notes
nnoremap <leader>nr :RecentNotes<cr>
nnoremap <leader>ns :SearchNotes<space>
nnoremap <leader>nn :Note<space>

" q - Quit
nnoremap <leader>q :q<cr>
nnoremap <leader>Q :qall!<cr>

" r - Remove
nnoremap <silent> <leader>rw :%s/\s\+$//<cr>

" s - Specs
nnoremap <silent> <leader>sf :VroomRunTestFile<cr>
nnoremap <silent> <leader>sc :VroomRunNearestTest<cr>
nnoremap <silent> <leader>sl :VroomRunLastTest<cr>

" S - Snippets
nnoremap <silent> <leader>se :UltiSnipsEdit<cr>

" t - Tmux

" Send visual selection to tmux
vnoremap <silent> <leader>tt :call VimuxSlime()<cr>
" Send current line to tmux
noremap <silent> <leader>tt V:call VimuxSlime()<cr>
" Send whole file to tmux
noremap <silent> <leader>tf ggVG:call VimuxSlime()<cr>
" Other tmux interactions
nnoremap <silent> <leader>to :VimuxRunCommand("")<cr>
nnoremap <silent> <leader>ti :VimuxInspectRunner<cr>
nnoremap <silent> <leader>tc :VimuxCloseRunner<cr>
nnoremap <silent> <leader>tz :VimuxZoomRunner<cr>

" T - Toggle
nnoremap <leader>ts :setlocal spell spelllang=en_us<cr>

" V - Vimrc
nnoremap <leader>Ve :e $MYVIMRC<cr>
nnoremap <leader>Vs :so $MYVIMRC<cr>

" w - Windows
nnoremap <silent> <leader>wv :vsp<cr>
nnoremap <silent> <leader>ws :sp<cr>
nnoremap <silent> <leader>ww <c-w>w
nnoremap <silent> <leader>wc :wq<cr>

"}}}
" Keybindings (other) ---------------------------------------------------------------{{{

" Auto indent pasted text
nnoremap p p=`]<C-o>
nnoremap P P=`]<C-o>

" Search and replace current selection
vnoremap <C-r> "hy:%s/<C-r>h//g<left><left>

" Search visual selected text with Ags
vnoremap <C-f> "hy:Ags "<C-r>h"<cr>

" delete lines and word from insert mode
inoremap <c-d> <esc>ddi
inoremap <c-w> <esc>bdiwi

" uppercase current word
inoremap <c-u> <esc>gUiwea

" quick beginning/end of line
nnoremap H _
nnoremap L $

" move around using visual lines, usefull when wrap is enabled
nnoremap <silent> k gk
nnoremap <silent> j gj

" quick region expand in visual mode
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" resize panes with cursor keys
nnoremap <Left> :vertical resize -2<CR>
nnoremap <Right> :vertical resize +2<CR>
nnoremap <Up> :resize -2<CR>
nnoremap <Down> :resize +2<CR>

"}}}
" Motions ---------------------------------------------------------------{{{

" motions for in next ..
onoremap in( :<c-u>normal! f(vi(<cr>
onoremap in) :<c-u>normal! f(vi(<cr>
onoremap in[ :<c-u>normal! f[vi[<cr>
onoremap in] :<c-u>normal! f[vi[<cr>
onoremap in{ :<c-u>normal! f{vi{<cr>
onoremap in} :<c-u>normal! f{vi{<cr>
onoremap in' :<c-u>normal! f'vi'<cr>
onoremap in" :<c-u>normal! f"vi"<cr>


"}}}
" Filetype: Ruby -----------------------------------------------------------------{{{

augroup rubygroup
  autocmd!
  autocmd FileType ruby let b:dispatch = 'ruby %'
  autocmd FileType ruby :iabbrev <buffer> bpry require 'pry'; binding.pry
  autocmd FileType ruby :iabbrev <buffer> classdescription #== Description
        \<cr>
        \<cr>== Responsibilities
        \<cr>
        \<cr>== Rationale
        \<cr>
augroup END

"}}}
" Filetype: Scala -----------------------------------------------------------------{{{

augroup scalagroup
  autocmd!
  autocmd BufRead,BufNewFile *.hocon set filetype=yaml
  autocmd FileType scala let b:dispatch = 'scala -nc %'
augroup END

"}}}
" Filetype: Markdown --------------------------------------------------------------{{{

augroup markdowngroup
  autocmd!
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd FileType markdown set wrap
  autocmd FileType markdown setlocal spell
augroup END

"}}}
