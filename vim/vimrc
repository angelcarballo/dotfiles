"" NOTAS

" gu (sobre seleccion visual) -> minusculas
" gU (sobre seleccion visual) -> mayusculas
" [Ctr-r][+] -> Pegar desde OS
" ZZ (normal mode) -> guardar y cerrar
" & (normal mode) -> repetir la ultima sustitucion  \\
" gc<movimiento> para comentar y descomentar
" <leader-z> para hacer zoom en el buffer actual
" ar/ir son bloques ruby (externo e interno respectivamente)

""""""""""""""""""" VUNDLE """""""""""""""""""""

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

Plugin 'gmarik/Vundle.vim'                " let Vundle manage Vundle, required
Plugin 'tpope/vim-fugitive'               " git integration
Plugin 'cakebaker/scss-syntax.vim'        " SCSS syntax
Plugin 'Valloric/YouCompleteMe'           " autocompletion
Plugin 'SirVer/ultisnips'                 " snippets support
Plugin 'ervandew/supertab'                " se usa solo para que YCM y UntSnips funcionen bien juntos
Plugin 'majutsushi/tagbar'                " ctags integration
Plugin 'tpope/vim-rails'                  " rails integration
Plugin 'kien/ctrlp.vim'                   " fuzzy finder
Plugin 'bling/vim-airline'                " better status bar
Plugin 'godlygeek/tabular'                " alinear codigo
Plugin 'pangloss/vim-javascript'          " soporte mejorado para JavaScript
Plugin 'tpope/vim-endwise'                " agrega etiquetas de cierre (end) en ruby
Plugin 'tpope/vim-commentary'             " comentar/descomentar codigo
Plugin 'othree/html5.vim'                 " soporte HTML5
Plugin 'jiangmiao/auto-pairs'             " autocierre de parentesis, llaves...
Plugin 'ZoomWin'                          " para hacer zoom en el buffer activo
Plugin 'gorodinskiy/vim-coloresque'       " resalta los colores en archivos CSS
Plugin 'kana/vim-textobj-user'            " soporte para objetos de texto personalizados (dependencia de rubyblock)
Plugin 'nelstrom/vim-textobj-rubyblock'   " objetos de texto ruby
Plugin 'altercation/vim-colors-solarized' " colorscheme
Plugin 'mustache/vim-mustache-handlebars' " mustache support

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

""""""""""""""""""" /VUNDLE """""""""""""""""""""


"" Especifico para tipos de archivo
augroup inc
autocmd BufRead,BufNewFile *.inc set filetype=php
augroup END

"" General
syntax enable
set encoding=utf-8
set nu                    " numeros de linea
set showcmd               " muestra comandos incompletos
set ruler                 " muestra la posicion del cursor
set scrolloff=5           " dejar siempre espacio alrededor del cursor
let mapleader=","         " cambiar <leader> de \ a ,
filetype plugin indent on
set foldmethod=marker     " marcar los pliegues manualmente con triples llaves (o :zf)

"" Whitespace
set nowrap
set tabstop=2 shiftwidth=2
set expandtab " usar espacios en lugar de tabs
set backspace=indent,eol,start " backspace a traves de cualquier cosa

"" Busqueda
set hlsearch   " resaltar resultados de busqueda
set incsearch  " busqueda incremental
set ignorecase " busqueda independiente de may/min...
set smartcase  " excepto si el termino tiene al menos una mayuscula

"" Apariencia
set background=dark
colorscheme codeschool
set scrolloff=5 " dejar marjen tras la ultima fila

"" Log y deshacer
set history=1000
set undolevels=1000
set title
set visualbell   " flash en pantalla en lugar de *beep*
set noerrorbells " sin aviso en errores (solo flash al llegar al final/principio de archivo)

"" Archivos a ignorar
set wildignore+=*.swp,*.bak,*.pyc,*.class,*.lock       " Comunes
set wildignore+=*/tmp/*,*.so,*.zip                     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.zip,*.exe                  " Windows
set wildignore+=*/bundle/*,*/temp/*,*/backup/*,*/doc/* " Vim

"" Backup
set nobackup
set noswapfile

" Set font according to system
if has("mac")
  set guifont=Monaco:h12
elseif has("unix")
  set gfn=Monospace\ 10
elseif has("win32")
  set gfn=Consolas:h11
endif

"" Backups
if has("win32")
  set backupdir=~/vimfiles/backup    " archivos de backup
  set directory=~/vimfiles/temp      " archivos de swap
else
  set backupdir=~/.vim/backup    " archivos de backup
  set directory=~/.vim/temp      " archivos de swap
endif

"" Activar matchit
runtime macros/matchit.vim

" Vim Airline (fancy status bar)
set laststatus=2 " para mostrar siempre barra de estado

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Open TagBar
nmap <silent> <leader>t :TagbarToggle<CR>

" Open File Explorer
nmap <silent> <leader>e :Explore<CR>

" Hace que SuperTab rediriga a YCM. UltSnippets redirige a su vez a supertab
" si no hay ning√∫n snippet
let g:ycm_key_list_select_completion = ['<C-TAB>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-S-TAB>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-Tab>'

" Zoom
nmap <silent> <leader>z :ZoomWin<CR>
