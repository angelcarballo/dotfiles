" Vundle Plugins and configuration ---------------------------------------------{{{

set nocompatible                          " be iMproved, required
filetype off                              " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Basic plugins
Plugin 'VundleVim/Vundle.vim'             " let Vundle manage Vundle, required
Plugin 'tpope/vim-fugitive'               " git integration
Plugin 'kien/ctrlp.vim'                   " fuzzy finder
Plugin 'tpope/vim-surround'               " alter surroundings (), [], '', {}
Plugin 'tommcdo/vim-exchange'             " text exchange operator (cx..)
Plugin 'kana/vim-textobj-user'            " custom text object support
Plugin 'ConradIrwin/vim-bracketed-paste'  " toggle paste mode automatically

" Languages and frameworks
Plugin 'vim-ruby/vim-ruby'                " ruby integration
Plugin 'tpope/vim-rake'                   " rake integration
Plugin 'tpope/vim-rbenv'                  " rbenv integration
Plugin 'tpope/vim-rails'                  " rails integration
Plugin 'tpope/vim-bundler'                " bundler integration
Plugin 'cakebaker/scss-syntax.vim'        " SCSS syntax
Plugin 'pangloss/vim-javascript'          " improved js support
Plugin 'othree/html5.vim'                 " HTML5 support
Plugin 'mustache/vim-mustache-handlebars' " mustache support
Plugin 'pprovost/vim-markdown-jekyll'     " jekyll style markdown support
Plugin 'elzr/vim-json'                    " json support
Plugin 'rodjek/vim-puppet'                " puppet support
Plugin 'tmux-plugins/vim-tmux'            " tmux syntax support
Plugin 'derekwyatt/vim-scala'             " scala syntax support
Plugin 'plasticboy/vim-markdown'          " markdown support

" Text objects
Plugin 'nelstrom/vim-textobj-rubyblock'   " ruby block text object
Plugin 'whatyouhide/vim-textobj-erb'      " erb block text object
Plugin 'suan/vim-instant-markdown'        " markdown preview
Plugin 'kana/vim-textobj-entire'          " entire buffer text object
Plugin 'michaeljsmith/vim-indent-object'  " indentation based text object
Plugin 'tpope/vim-abolish'                " coercions, plurals, camelcase, ...

" Look & Feel, Navigation
Plugin 'tpope/vim-vinegar'                " file explorer improvements
Plugin 'bling/vim-airline'                " better status bar
Plugin 'yggdroot/indentLine'              " show indentation lines
Plugin 'altercation/vim-colors-solarized' " solarized color scheme
Plugin 'bronson/vim-visual-star-search'   " search visual selected text with '*'
" Plugin 'edkolev/tmuxline.vim'             " apply vim colorscheme to tmux status line

" Autocompletion
Plugin 'SirVer/ultisnips'                 " snippets support
Plugin 'ervandew/supertab'                " magic code autocomplete!
Plugin 'tpope/vim-endwise'                " autoclose for vim blocks
Plugin 'jiangmiao/auto-pairs'             " autoclose for (, [, {
Plugin 'docunext/closetag.vim'            " autoclose for html tags
Plugin 'mattn/webapi-vim'                 " call external api's
Plugin 'christoomey/vim-quicklink'        " quick get links via google

" Third party integration
Plugin 'christoomey/vim-tmux-navigator'     " navigate to tmux panes from vim
Plugin 'tmux-plugins/vim-tmux-focus-events' " detect focus when in tmux
Plugin 'gabesoft/vim-ags'                   " ag searcher integration
Plugin 'benmills/vimux'                     " tmux intergation
Plugin 'ludovicchabant/vim-gutentags'       " automatic tag updater
Plugin 'tpope/gem-ctags'                    " include tags from installed gems

" Extras
Plugin 'godlygeek/tabular'                " code align (like on this comment)
Plugin 'tpope/vim-commentary'             " comment/uncomment code
Plugin 'skalnik/vim-vroom'                " ruby test runner
Plugin 'tpope/vim-dispatch'               " run processes on the background
Plugin 'airblade/vim-gitgutter'           " realtime git-diff
Plugin 'tpope/vim-repeat'                 " extend repeat support
Plugin 'AndrewRadev/switch.vim'           " easy switches
Plugin 'ecomba/vim-ruby-refactoring'      " easier ruby refactoring
Plugin 'danro/rename.vim'                 " rename current file
Plugin 'christoomey/vim-titlecase'        " titlecase text objects
Plugin 'christoomey/vim-system-copy'      " send commands to tmux
Plugin 'xolox/vim-notes'                  " easy note taking
Plugin 'xolox/vim-misc'                   " required by vim-notes
Plugin 'tpope/vim-eunuch'                 " run common UNIX commands for the current file


" All of your Plugins must be added before the following line
call vundle#end()                         " required
filetype plugin indent on                 " required

"}}}


" General settings ------------------------------------------------------------{{{
syntax enable
let mapleader=","                 " map <leader> to ,
filetype plugin indent on         " autoindent by file type
set encoding=utf-8                " use UTF8 by default"
set nu                            " show line numbers
set showcmd                       " show complete commands
set ruler                         " show cursor position
set scrolloff=5                   " leave space after the current line
set foldmethod=marker             " fold using {{{ .. }}} markers
set diffopt+=vertical             " Always use vertical diffs
set mouse+=a                      " enable mouse support in (a)ll modes
set noswapfile                    " disable swap files, let git do the work
set splitright                    " Open new vertical split panes to right
set history=1000                  " max history
set undolevels=1000               " max undo levels"
set hlsearch                      " higlight search results
set incsearch                     " incremental search
set ignorecase                    " ignore case on search ...
set smartcase                     " ... except if query contains uppercase characters
set nowrap                        " dont wrap lines
set tabstop=2 shiftwidth=2        " two space tabs
set expandtab                     " use spaces instead of tabs
set backspace=indent,eol,start    " backspace through everything
set wildmenu                      " visual autocomplete for command menu
set lazyredraw                    " redraw only when needed
runtime macros/matchit.vim        " allow % to match more than just single characters
"}}}


" Look & Feel ------------------------------------------------------------------{{{
set background=dark
set visualbell                 " visual flash
set noerrorbells               " no flash on errors, only al beginning/end of file
set laststatus=2               " always show status bar (Airline)
set listchars=tab:▸\ ,trail:·  " symbols for invisible characters
set list                       " show extra whitespace
colorscheme solarized          " Colorscheme

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =
"}}}


" Files to ignore -------------------------------------------------------------{{{
set wildignore+=*.swp,*.bak,*.pyc,*.class,*.lock       " Common
set wildignore+=*/tmp/*,*.so,*.zip                     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.zip,*.exe                  " Windows
set wildignore+=*/temp/*,*/backup/*                    " Vim
set wildignore+=*/_site/*                              " Jekyll
"}}}


" Tmux related -----------------------------------------------------------------{{{

" tmux knows the extended mouse mode
if &term =~ '^screen'
  set ttymouse=xterm2
endif

"}}}


" Ruby Filetype -----------------------------------------------------------------{{{
augroup rubygroup
  autocmd!
  autocmd FileType ruby let b:dispatch = 'ruby %'
  autocmd FileType ruby setlocal spell
  autocmd FileType ruby setl sw=2 sts=2 ts=2 tw=80 " Two spaces per tab
  autocmd FileType ruby nnoremap <leader>vs :vsplit <C-r>=substitute(expand("%"), '^lib\(.*\)\.rb$', 'spec\1_spec.rb', "")<cr><cr>
  autocmd FileType ruby :iabbrev <buffer> bpry require 'pry'; binding.pry
  autocmd FileType ruby :iabbrev <buffer> classdescription #== Description
        \<CR>
        \<CR>== Responsibilities
        \<CR>
        \<CR>== Rationale
        \<CR>
augroup END
"}}}


" Scala Filetype -----------------------------------------------------------------{{{
augroup scalagroup
  autocmd!
  autocmd BufRead,BufNewFile *.hocon set filetype=yaml
  autocmd FileType scala let b:dispatch = 'scala -nc %'
augroup END
"}}}


" Markdown Filetype --------------------------------------------------------------{{{
augroup markdowngroup
  autocmd!
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd FileType markdown set wrap
  autocmd FileType markdown setlocal spell
augroup END
"}}}


" Plugin options ---------------------------------------------------------------{{{

"" Vim-ruby options
let ruby_spellcheck_strings = 1   " enable spellcheck inside ruby strings
let ruby_minlines = 100           " avoid syntax errors while scrolling on large files

"" IndentLine options
let g:indentLine_char = '·'

"" Split window on UltiSnipsEdit
let g:UltiSnipsEditSplit="horizontal"

"" UltiSnips options
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

"" Airline options
let g:airline_powerline_fonts = 1
let g:airline_detect_paste = 1
let g:airline#extensions#hunks#enabled = 0
let g:airline#extensions#wordcount#enabled = 0
let g:airline#extensions#ctrlp#color_template = 'visual'

"" Vromm configuration
let g:vroom_map_keys = 0
let g:vroom_cucumber_path = 'rspec '
let g:vroom_use_vimux  = 1

"" Markdown options
let g:vim_markdown_folding_disabled=1

"" Ags (The Silver Searcher)
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files
  let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden
        \ --ignore .git
        \ --ignore .svn
        \ --ignore .hg
        \ --ignore .DS_Store
        \ --ignore bundle
        \ --ignore doc
        \ -g ""'
  let g:ctrlp_use_caching = 0
endif

"" Vim-Notes options
let g:notes_directories = ['~/Dropbox/notes']
let g:notes_tab_indents = 0
let g:notes_smart_quotes = 0

"}}}


" Global mappings ---------------------------------------------------------------{{{

" Quickly edit/source the vimrc file
nnoremap <silent> <leader>eV :e $MYVIMRC<CR>
nnoremap <silent> <leader>sV :so $MYVIMRC<CR>

" Quickly edit snippets
nnoremap <silent> <leader>eS :UltiSnipsEdit<CR>

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Splits
nnoremap <leader>sv :vsp<CR>
nnoremap <leader>sh :sp<CR>

" Use arrows to navigate buffers and tabs
nnoremap <Left> :bp<CR>
nnoremap <Right> :bn<CR>

" Rspec and turnip tests on tmux
map <leader>sf :VroomRunTestFile<CR>
map <leader>sc :VroomRunNearestTest<CR>
map <leader>sl :VroomRunLastTest<CR>

" Send visual selection to tmux
vnoremap <leader>tx :call VimuxSlime()<CR>

" Send current line to tmux
noremap <leader>tx V:call VimuxSlime()<CR>

" Send whole file to tmux
noremap <leader>tf ggVG:call VimuxSlime()<CR>

" Other tmux interactions
nnoremap <leader>to :VimuxRunCommand("")<CR>
nnoremap <leader>ti :VimuxInspectRunner<CR>
nnoremap <leader>tc :VimuxCloseRunner<CR>
nnoremap <leader>tz :VimuxZoomRunner<CR>

" Open File Explorer
nnoremap <silent> <leader>ei :Explore<CR>
nnoremap <silent> <leader>es :Sex<CR>
nnoremap <silent> <leader>ev :Vex<CR>

" Remove Trailing Whitespace
nnoremap <silent> <leader>rw :%s/\s\+$//<CR>

" Execute dispatch for current file (based on filetype)
map <leader>x :Dispatch<CR>

" Easier last change shortcut
nnoremap <silent> <leader>lc `[

" Use ctrlp to find buffer
nnoremap <silent> <leader>b :CtrlPBuffer<CR>

" Quick save/quit
nnoremap <leader>w :w!<CR>
nnoremap <leader>q :q!<CR>
nnoremap <leader>wq :wq<CR>

" Quick ruby extract method
vnoremap <leader>cm :RExtractMethod<CR>

" Check spelling
nnoremap <silent> <leader>cs :setlocal spell spelllang=en_us<CR>

" Fugitive
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gp :Gpush

" Search and replace current selection
vnoremap <C-r> "hy:%s/<C-r>h//g<left><left>

" Search visual selected text with Ags
vnoremap <C-f> "hy:Ags "<C-r>h"<CR>

" move lines up and down
nnoremap + ddkP
nnoremap - ddp

" delete lines and word from insert mode
inoremap <c-d> <esc>ddi
inoremap <c-w> <esc>bdiwi

" uppercase current word
inoremap <c-u> <esc>gUiwea

" quick surround current word
nmap <leader>' ysiw'
nmap <leader>" ysiw"
nmap <leader>( ysiw(
nmap <leader>) ysiw)
nmap <leader>] ysiw]
nmap <leader>} ysiw}

" quick beginning/end of line
nnoremap H _
nnoremap L $

" motions for in next ..
onoremap in( :<c-u>normal! f(vi(<cr>
onoremap in[ :<c-u>normal! f[vi[<cr>
onoremap in{ :<c-u>normal! f{vi{<cr>
onoremap in' :<c-u>normal! f'vi'<cr>
onoremap in' :<c-u>normal! f'vi'<cr>

" vim-notes mappings
nnoremap <leader>rn :RecentNotes<CR>
nnoremap <leader>sn :SearchNotes<space>
nnoremap <leader>on :Note<space>

" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>

" Altern between light/dark background
call togglebg#map("<F2>")

"}}}


" Custom functions ---------------------------------------------------------------{{{

"""""""" Zoom panes """"""""""
function! s:ZoomToggle() abort
  if exists('t:zoomed') && t:zoomed
    execute t:zoom_winrestcmd
    let t:zoomed = 0
  else
    let t:zoom_winrestcmd = winrestcmd()
    resize
    vertical resize
    let t:zoomed = 1
  endif
endfunction
command! ZoomToggle call s:ZoomToggle()
nnoremap <silent> <leader>f :ZoomToggle<CR>

"""""""" Copy current file path """"""""""
if has("mac") || has("gui_macvim") || has("gui_mac")
  " relative path  (src/foo.txt)
  nnoremap <leader>cf :let @*=expand("%")<CR>

  " absolute path  (/something/src/foo.txt)
  nnoremap <leader>cF :let @*=expand("%:p")<CR>
endif

"""""""" Send text to tmux """"""""""
function! VimuxSlime() range
  let cmds = join(getline("'<","'>"), '')
  call VimuxRunCommand(cmds)
endfunction

"}}}
