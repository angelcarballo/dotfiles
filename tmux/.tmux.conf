# Plugin management:
#
#  - prefix-I : install
#  - prefix-u : uninstall
#  - prefix-U : update
#  - prefix-alt-u : clean unused

# {{{ Options

# make tmux behave with zsh
setw -g xterm-keys on

# enable mouse support
setw -g mouse on

# Don't wrap searches
set -w -g wrap-search off

# Use ZSH
set -g default-shell $SHELL

# Do not use login shells
set -g default-command "${SHELL}"

# Advertise tmux as 256 capable
set -g default-terminal "screen-256color"

# increase scrollback history
set -g history-limit 5000

# shorten command delay
set -sg escape-time 1

# enable truecolor (24 bit)
set -ga terminal-overrides ",xterm-256color:Tc"

# disable automatic renaming of windows
set -g allow-rename off

# don't limit window size to small clients if they're not showing the same window
setw -g aggressive-resize on

# use vim keybindings in copy mode
setw -g mode-keys vi

# set window and pane index to 1 (0 by default)
set -g base-index 1
setw -g pane-base-index 1

# re-number windows when one is closed
set -g renumber-windows on

# load theme
source-file ~/.tmux/theme.tmux

# }}}

# {{{ Bindings

# Free up C-b, change prefix to C-a
unbind-key C-b
set -g prefix C-a

# Prefix+a sends prefix (C-a) to client
bind-key a send-prefix

# w cleans/whipeouts the screen
bind-key w send-keys -R \; clear-history \; send-keys Enter

# Start copy mode with 'v' or 'C-Space' (and free '[')
unbind-key [
bind-key v copy-mode
bind-key C-u copy-mode

# Search for previous zsh prompt (using non-breaking whitespace)
bind-key -n C-Space copy-mode\; send-keys -X start-of-line\; send-keys -X search-backward "»"
bind-key C-Space copy-mode\; send-keys -X start-of-line\; send-keys -X search-backward "»"

unbind-key p
bind-key p paste-buffer


# Stay in copy mode on drag end, but otherwise exit for mouse up.
unbind -T copy-mode-vi 'MouseDragEnd1Pane'
bind-key -T copy-mode-vi 'MouseUp1Pane' send-keys -X begin-selection

# setup 'v' to begin selection as in Vim
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi V send-keys -X select-line
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy" \; display-message "selection copied to system clipboard"

# switch sessions, unimpaired style
bind-key ] switch-client -p \; refresh-client -S
bind-key [ switch-client -n \; refresh-client -S

# splitting with | and - and always use current pane path
bind-key '-' split-window -c "#{pane_current_path}"
bind-key C-s split-window -c "#{pane_current_path}"
bind-key \ split-window -h -c "#{pane_current_path}"
bind-key C-v split-window -h -c "#{pane_current_path}"
bind-key c new-window -c "#{pane_current_path}"

# window traversal
bind-key j next-window
bind-key k previous-window
bind-key l last-window

# flag to check if we're inside vim/emacs/fzf where C-hjkl is used for internal navigation
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?|emacs|fzf)(diff)?$'"

# hjkl pane traversal
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# resizing panes
bind-key -n C-Left  resize-pane -L 10
bind-key -n C-Right resize-pane -R 10
bind-key -n C-Down  resize-pane -D 5
bind-key -n C-Up    resize-pane -U 5

# change layout
bind-key = select-layout even-vertical
bind-key % select-layout even-horizontal

# maximize/minimize current pane
bind-key Space resize-pane -Z

# send-keysC-a to current pane
bind-key a send-keys C-a

# select session (using fzf)
bind-key C-a split-window -v -c "#{pane_current_path}" "ots `tmux list-sessions -F '#{session_name}' | fzf`"

# open project (using fzf) - it will switch to an existing session or open a new one
bind-key C-p split-window -v -c "#{pane_current_path}" "ots `cd $HOME/src && ls -d */ | cut -f1 -d'/' | fzf`"

# switch to previous session
bind-key C-l switch-client -l

# reorder windows
bind-key Left swap-window -t -1
bind-key Right swap-window -t +1

# easily move current pane to another window (format window-number.pane-number)
bind-key m display-panes\; command-prompt -p "move pane to (ex. 1.1) #: "  "move-pane -t :'%%'"

# kill current session
bind-key q confirm-before -p "Kill #S (y/n)?" "run-shell 'tmux switch-client -n \\\; kill-session -t \"\$(tmux display-message -p \"#S\")\"'"

# reload ~/.tmux.conf using PREFIX r
bind-key C-r source-file ~/.tmux.conf \; display "Configuration reloaded"

# quickly edit notes
bind-key C-t split-window -h -c ~/src/dotfiles "vim $NOTES/todo.md"
bind-key C-n split-window -h -c ~/src/dotfiles "vim $NOTES/vim.md"

# synchronise panes (send same input) with border indicator
bind-key + setw synchronize-panes on \;\
	setw pane-active-border-style fg=red \;\
	setw pane-border-style fg=yellow \;\
	display-message "Sync panes ON"
bind-key _ setw synchronize-panes off \;\
	setw pane-active-border-style fg=green \;\
	setw pane-border-style default \;\
	display-message "Sync panes OFF"

# }}}

# {{{ Plugin options

# dont scroll buffers for known programs (vim, grep, less, ...) when pane is on fullscreen
set -g @prevent-scroll-for-fullscreen-alternate-buffer "off"

# # custom searches for tmux-copycat
set -g @copycat_search_C-e "Failure/Error:"

# override default url search C-u
set -g @copycat_url_search "@"

# options for prefix-highlight
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr 'fg=black,bg=yellow,bold'

# }}}

# # {{{ Plugins

# plugin manager (install with <prefix-I>)
set -g @plugin 'tmux-plugins/tpm'

# Better copy/paste (y:copy | Y:copy and paste on command line | Alt-y:both)
set -g @plugin 'tmux-plugins/tmux-yank'

# # Select files/digits/urls/...
set -g @plugin 'thalesmello/tmux-copycat'

# Prefix indicator for statusbar
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'

# initialize TMUX plugin manager (keep this line at the very bottom)
run '~/.tmux/plugins/tpm/tpm'

# }}}
