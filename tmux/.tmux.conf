# Plugin management:
#
#  - prefix-I : install
#  - prefix-u : uninstall
#  - prefix-U : update
#  - prefix-alt-u : clean unused

# {{{ Bindings

# Free up C-b, change prefix to C-a
unbind C-b
set -g prefix C-a

# Prefix+a sends prefix (C-a) to client
bind a send-prefix

# w cleans/whipeouts the screen
bind w send-keys -R \; clear-history \; send-keys Enter

# Stay in copy mode on drag end, but otherwise exit for mouse up.
unbind -T copy-mode-vi 'MouseDragEnd1Pane'
bind -T copy-mode-vi 'MouseUp1Pane' send -X begin-selection

# start copy mode with 'v' or 'C-Space'
unbind [
bind v copy-mode
bind -n C-Space copy-mode

unbind p
bind p paste-buffer

# setup 'v' to begin selection as in Vim
bind -T copy-mode-vi v send -X begin-selection
bind -T copy-mode-vi V send -X select-line
bind -T copy-mode-vi r send -X rectangle-toggle
bind -T copy-mode-vi y send -X copy-pipe-and-cancel "pbcopy"

# switch sessions, unimpaired style
bind ] switch-client -p \; refresh-client -S
bind [ switch-client -n \; refresh-client -S

# splitting with | and - and always use current pane path
bind '-' split-window -c "#{pane_current_path}"
bind C-s split-window -c "#{pane_current_path}"
bind \ split-window -h -c "#{pane_current_path}"
bind C-v split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# window traversal
bind c-j next-window
bind c-k previous-window
bind j next-window
bind k previous-window
bind l last-window

# window/session movement submode
bind-key m switch-client -T MOVE
bind-key -T MOVE j next-window \; switch-client -T MOVE
bind-key -T MOVE k previous-window \; switch-client -T MOVE
bind-key -T MOVE n switch-client -n \; switch-client -T MOVE
bind-key -T MOVE p switch-client -p \; switch-client -T MOVE


# flag to check if we're inside vim/emacs/fzf where C-hjkl is used for internal navigation
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?|emacs|fzf)(diff)?$'"

# hjkl pane traversal
bind -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# resizing panes (5 or 10 cursor cells per bump)
bind -n C-Left resize-pane -L 10
bind -n C-Right resize-pane -R 10
bind -n C-Down resize-pane -D 5
bind -n C-Up resize-pane -U 5

# change layout
bind = select-layout even-vertical
bind % select-layout even-horizontal
bind ` next-layout

# maximize/minimize current pane
bind Space resize-pane -Z

# send C-a to current pane
bind a send-keys C-a

# select session (using fzf)
bind C-a split-window -v -c "#{pane_current_path}" "ots `tmux list-sessions -F '#{session_name}' | fzf`"

# open project (using fzf) - it will switch to an existing session or open a new one
bind C-p split-window -v -c "#{pane_current_path}" "ots `cd $HOME/src && ls -d */ | cut -f1 -d'/' | fzf`"

# switch to previous session
bind C-l switch-client -l

# reorder windows
bind Left swap-window -t -1
bind Right swap-window -t +1

# easily move current pane to another window (format window-number.pane-number)
bind M display-panes\; command-prompt -p "move pane to (ex. 1.1) #: "  "move-pane -t :'%%'"

# kill current session
bind q run-shell 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux kill-session'

# reload ~/.tmux.conf using PREFIX r
bind C-r source-file ~/.tmux.conf \; display "Configuration reloaded"

# quickly edit notes
bind C-t split-window -h -c ~/src/dotfiles "reattach-to-user-namespace vim -c 'Note todo'"
bind C-n split-window -h -c ~/src/dotfiles "reattach-to-user-namespace vim -c 'Note vim'"

# synchronise panes (send same input) with border indicator
bind + setw synchronize-panes on \;\
	setw pane-active-border-style fg=red \;\
	setw pane-border-style fg=yellow \;\
	display-message "Sync panes ON"
bind _ setw synchronize-panes off \;\
	setw pane-active-border-style fg=green \;\
	setw pane-border-style default \;\
	display-message "Sync panes OFF"

# }}}

# {{{ Options

# make tmux behave with zsh
setw -g xterm-keys on

# enable mouse support
setw -g mouse on

# Don't wrap searches
set -w -g wrap-search off

# Use ZSH
set -g default-shell $SHELL

# Wrap everything on reattach-to.. to ensure copy/paste works with MacOS
set -g default-command "reattach-to-user-namespace -l ${SHELL}"

# Advertise tmux as 256 capable
set -g default-terminal "screen-256color"

# set scrollback history to 10k
set -g history-limit 10000

# Don't wait for an escape sequence after seeing C-a
set -s escape-time 0

# focus events enabled for terminals that support them
set -g focus-events on

# shorten command delay
set -sg escape-time 1

# enable truecolor (24 bit)
set -ga terminal-overrides ",xterm-256color:Tc"

# disable automatic renaming of windows
set -g allow-rename off

# don't limit window size to small clients if they're not showing the same window
setw -g aggressive-resize on

# use vim keybindings in copy mode
setw -g mode-keys vi

# set window and pane index to 1 (0 by default)
set -g base-index 1
setw -g pane-base-index 1

# re-number windows when one is closed
set -g renumber-windows on

# load theme
source-file ~/.tmux/theme.tmux

# }}}

# {{{ Plugin options

# dont scroll buffers for known programs (vim, grep, less, ...) when pane is on fullscreen
set -g @prevent-scroll-for-fullscreen-alternate-buffer "off"

# # custom searches for tmux-copycat
set -g @copycat_search_C-e "Failure/Error:"
set -g @copycat_search_C-b "‚ùØ"

# options for prefix-highlight
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr 'fg=black,bg=yellow,bold'

# }}}

# # {{{ Plugins

# plugin manager (install with <prefix-I>)
set -g @plugin 'tmux-plugins/tpm'

# Better copy/paste (y:copy | Y:copy and paste on command line | Alt-y:both)
set -g @plugin 'tmux-plugins/tmux-yank'

# # Select files/digits/urls/...
set -g @plugin 'thalesmello/tmux-copycat'

# Prefix indicator for statusbar
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'

# initialize TMUX plugin manager (keep this line at the very bottom)
run '~/.tmux/plugins/tpm/tpm'

# }}}
